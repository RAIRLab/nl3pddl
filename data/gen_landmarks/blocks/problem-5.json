{
    "domain": "blocks",
    "problem": "problem-5.pddl",
    "problem_num": 5,
    "trivial_state_landmarks": [
        "Atom ontable(b2)",
        "Atom ontable(b4)",
        "Atom ontable(b5)",
        "Atom ontable(b8)",
        "Atom clear(b1)",
        "Atom clear(b3)",
        "Atom clear(b5)",
        "Atom clear(b6)",
        "Atom clear(b7)",
        "Atom handempty()",
        "Atom on(b1, b2)",
        "Atom ontable(b3)",
        "Atom on(b6, b4)",
        "Atom on(b7, b8)"
    ],
    "non_trivial_state_landmarks": [
        "Atom ontable(b1)",
        "Atom on(b3, b8)",
        "Atom on(b6, b5)",
        "Atom ontable(b7)",
        "Atom clear(b2)",
        "Atom clear(b4)",
        "Atom clear(b8)",
        "Atom holding(b1)",
        "Atom holding(b3)",
        "Atom holding(b6)",
        "Atom holding(b7)"
    ],
    "non_applicable_state_landmarks": [
        "NegatedAtom clear(b1)",
        "NegatedAtom clear(b2)",
        "NegatedAtom clear(b3)",
        "NegatedAtom clear(b4)",
        "NegatedAtom clear(b5)",
        "NegatedAtom clear(b6)",
        "NegatedAtom clear(b7)",
        "NegatedAtom clear(b8)",
        "NegatedAtom handempty()"
    ],
    "landmarks": [
        [
            "stack b3 b8"
        ],
        [
            "pick-up b3"
        ],
        [
            "unstack b6 b4"
        ],
        [
            "stack b6 b5"
        ],
        [
            "unstack b7 b8"
        ],
        [
            "put-down b7"
        ],
        [
            "put-down b1"
        ],
        [
            "unstack b1 b2"
        ]
    ],
    "raw_output": {
        "planner_output": "INFO     planner time limit: None\nINFO     planner memory limit: None\n\nINFO     Running translator.\nINFO     translator stdin: None\nINFO     translator time limit: None\nINFO     translator memory limit: None\nINFO     translator command line string: /home/james/repos/nl2pddl3/.venv/bin/python /home/james/repos/nl2pddl3/.venv/lib/python3.10/site-packages/forbiditerative/builds/release/bin/translate/translate.py /home/james/repos/nl2pddl3/data/domains/blocks/ground.pddl /home/james/repos/nl2pddl3/data/gen_problems/feedback/blocks/problem-5.pddl --sas-file output.sas\nParsing...\nParsing: [0.000s CPU, 0.002s wall-clock]\nNormalizing task... [0.000s CPU, 0.000s wall-clock]\nInstantiating...\nGenerating Datalog program... [0.000s CPU, 0.000s wall-clock]\nNormalizing Datalog program...\nNormalizing Datalog program: [0.000s CPU, 0.001s wall-clock]\nPreparing model... [0.000s CPU, 0.000s wall-clock]\nGenerated 21 rules.\nComputing model... [0.010s CPU, 0.002s wall-clock]\n258 relevant atoms\n168 auxiliary atoms\n426 final queue length\n703 total queue pushes\nCompleting instantiation... [0.000s CPU, 0.003s wall-clock]\nInstantiating: [0.010s CPU, 0.007s wall-clock]\nComputing fact groups...\nFinding invariants...\n10 initial candidates\nFinding invariants: [0.000s CPU, 0.002s wall-clock]\nChecking invariant weight... [0.000s CPU, 0.000s wall-clock]\nInstantiating groups... [0.000s CPU, 0.000s wall-clock]\nCollecting mutex groups... [0.000s CPU, 0.000s wall-clock]\nChoosing groups...\n9 uncovered facts\nChoosing groups: [0.000s CPU, 0.000s wall-clock]\nBuilding translation key... [0.000s CPU, 0.000s wall-clock]\nComputing fact groups: [0.000s CPU, 0.003s wall-clock]\nBuilding STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]\nBuilding dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]\nBuilding mutex information...\nBuilding mutex information: [0.000s CPU, 0.000s wall-clock]\nTranslating task...\nProcessing axioms...\nSimplifying axioms... [0.000s CPU, 0.000s wall-clock]\nTranslator axioms removed by simplifying: 0\nComputing negative axioms... [0.000s CPU, 0.000s wall-clock]\nProcessing axioms: [0.000s CPU, 0.000s wall-clock]\nTranslating task: [0.010s CPU, 0.004s wall-clock]\n184 effect conditions simplified\n0 implied preconditions added\nDetecting unreachable propositions...\n0 operators removed\n0 axioms removed\n16 propositions removed\nDetecting unreachable propositions: [0.000s CPU, 0.002s wall-clock]\nReordering and filtering variables...\n17 of 17 variables necessary.\n9 of 17 mutex groups necessary.\n128 of 128 operators necessary.\n0 of 0 axiom rules necessary.\nReordering and filtering variables: [0.000s CPU, 0.001s wall-clock]\nTranslator variables: 17\nTranslator derived variables: 0\nTranslator facts: 90\nTranslator goal facts: 8\nTranslator mutex groups: 9\nTranslator total mutex groups size: 81\nTranslator operators: 128\nTranslator axioms: 0\nTranslator task size: 1132\nTranslator peak memory: 28772 KB\nWriting output... [0.000s CPU, 0.001s wall-clock]\nDone! [0.020s CPU, 0.020s wall-clock]\ntranslate exit code: 0\n\nINFO     Running search (/home/james/repos/nl2pddl3/.venv/lib/python3.10/site-packages/forbiditerative/builds/release/bin).\nINFO     search stdin: output.sas\nINFO     search time limit: None\nINFO     search memory limit: None\nINFO     search command line string: /home/james/repos/nl2pddl3/.venv/lib/python3.10/site-packages/forbiditerative/builds/release/bin/downward --evaluator 'h=lmcount(lm_factory=lm_exhaust(),dump_action_landmarks=true)' --always --search 'lazy_greedy([h,const(infinity())])' --internal-plan-file sas_plan < output.sas\n[t=3.2671e-05s, 11192 KB] reading input...\n[t=0.00071516s, 11324 KB] done reading input!\n[t=0.00178897s, 11720 KB] Initializing landmark count heuristic...\n[t=0.00186129s, 11720 KB] Generating landmark graph...\n[t=0.0019007s, 11720 KB] Initializing Exploration...\n[t=0.00199041s, 11720 KB] Generating landmarks by testing all facts with RPG method\n[t=0.00309858s, 11852 KB] Removed 0 reasonable or obedient reasonable orders\n[t=0.00313882s, 11852 KB] Landmarks generation time: 0.00127786s\n[t=0.00315958s, 11852 KB] Discovered 34 landmarks, of which 0 are disjunctive and 0 are conjunctive.\n[t=0.00316866s, 11852 KB] 0 edges\n[t=0.00317893s, 11852 KB] Landmark graph generation time: 0.00132617s\n[t=0.00318777s, 11852 KB] Landmark graph contains 34 landmarks, of which 0 are disjunctive and 0 are conjunctive.\n[t=0.00319639s, 11852 KB] Landmark graph contains 0 orderings.\n[t=0.00320619s, 11852 KB] Dumping landmarks from landmark graph: \n[t=0.00334648s, 11852 KB] Action landmarks end.\n[t=0.00345618s, 11852 KB] Building successor generator...done!\n[t=0.00355455s, 11852 KB] peak memory difference for successor generator creation: 0 KB\n[t=0.00356456s, 11852 KB] time for successor generation creation: 3.7143e-05s\n[t=0.0035758s, 11852 KB] Variables: 17\n[t=0.00359689s, 11852 KB] FactPairs: 90\n[t=0.00360924s, 11852 KB] Bytes per state: 8\n[t=0.00370495s, 11852 KB] Conducting lazy best first search, (real) bound = 2147483647\n[t=0.0037762s, 11852 KB] 17 initial landmarks, 8 goal landmarks\n[t=0.00379545s, 11852 KB] Initial heuristic value for lmcount(lm_factory = lm_exhaust, dump_action_landmarks = true): 17\n[t=0.0038049s, 11852 KB] Completely explored state space -- no solution!\n[t=0.00381282s, 11852 KB] Actual search time: 3.0746e-05s\n[t=0.00382195s, 11852 KB] Expanded 0 state(s).\n[t=0.00382195s, 11852 KB] Reopened 0 state(s).\n[t=0.00382195s, 11852 KB] Evaluated 1 state(s).\n[t=0.00382195s, 11852 KB] Evaluations: 1\n[t=0.00382195s, 11852 KB] Generated 0 state(s).\n[t=0.00382195s, 11852 KB] Dead ends: 1 state(s).\n[t=0.00382195s, 11852 KB] Number of registered states: 1\n[t=0.00382195s, 11852 KB] Int hash set load factor: 1/1 = 1\n[t=0.00382195s, 11852 KB] Int hash set resizes: 0\n[t=0.00382195s, 11852 KB] Search time: 0.000117401s\n[t=0.00382195s, 11852 KB] Total time: 0.00382195s\nSearch stopped without finding a solution.\nPeak memory: 11852 KB\nRemove intermediate file output.sas\nsearch exit code: 12\n\nDriver aborting after search\nINFO     Planner time: 0.10s\n",
        "planner_error": "",
        "landmarks": [
            {
                "facts": [
                    "Atom ontable(b1)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "put-down b1"
                ]
            },
            {
                "facts": [
                    "Atom ontable(b2)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "put-down b2"
                ]
            },
            {
                "facts": [
                    "Atom on(b3, b8)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "stack b3 b8"
                ]
            },
            {
                "facts": [
                    "Atom ontable(b4)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "put-down b4"
                ]
            },
            {
                "facts": [
                    "Atom ontable(b5)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "put-down b5"
                ]
            },
            {
                "facts": [
                    "Atom on(b6, b5)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "stack b6 b5"
                ]
            },
            {
                "facts": [
                    "Atom ontable(b7)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "put-down b7"
                ]
            },
            {
                "facts": [
                    "Atom ontable(b8)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "put-down b8"
                ]
            },
            {
                "facts": [
                    "Atom clear(b1)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "put-down b1",
                    "stack b1 b2",
                    "stack b1 b3",
                    "stack b1 b4",
                    "stack b1 b5",
                    "stack b1 b6",
                    "stack b1 b7",
                    "stack b1 b8",
                    "unstack b2 b1",
                    "unstack b3 b1",
                    "unstack b4 b1",
                    "unstack b5 b1",
                    "unstack b6 b1",
                    "unstack b7 b1",
                    "unstack b8 b1"
                ]
            },
            {
                "facts": [
                    "NegatedAtom clear(b1)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "stack b3 b1",
                    "stack b4 b1",
                    "stack b5 b1",
                    "stack b6 b1",
                    "stack b7 b1",
                    "stack b8 b1",
                    "unstack b1 b2"
                ]
            },
            {
                "facts": [
                    "Atom clear(b2)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "unstack b1 b2"
                ]
            },
            {
                "facts": [
                    "NegatedAtom clear(b2)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "pick-up b2",
                    "stack b1 b2",
                    "stack b3 b2",
                    "stack b4 b2",
                    "stack b5 b2",
                    "stack b6 b2",
                    "stack b7 b2",
                    "stack b8 b2"
                ]
            },
            {
                "facts": [
                    "Atom clear(b3)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "put-down b3",
                    "stack b3 b1",
                    "stack b3 b2",
                    "stack b3 b4",
                    "stack b3 b5",
                    "stack b3 b6",
                    "stack b3 b7",
                    "stack b3 b8",
                    "unstack b1 b3",
                    "unstack b2 b3",
                    "unstack b4 b3",
                    "unstack b5 b3",
                    "unstack b6 b3",
                    "unstack b7 b3",
                    "unstack b8 b3"
                ]
            },
            {
                "facts": [
                    "NegatedAtom clear(b3)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "pick-up b3",
                    "stack b1 b3",
                    "stack b2 b3",
                    "stack b4 b3",
                    "stack b5 b3",
                    "stack b6 b3",
                    "stack b7 b3",
                    "stack b8 b3"
                ]
            },
            {
                "facts": [
                    "Atom clear(b4)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "unstack b6 b4"
                ]
            },
            {
                "facts": [
                    "NegatedAtom clear(b4)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "pick-up b4",
                    "stack b1 b4",
                    "stack b2 b4",
                    "stack b3 b4",
                    "stack b5 b4",
                    "stack b6 b4",
                    "stack b7 b4",
                    "stack b8 b4"
                ]
            },
            {
                "facts": [
                    "Atom clear(b5)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "put-down b5",
                    "stack b5 b1",
                    "stack b5 b2",
                    "stack b5 b3",
                    "stack b5 b4",
                    "stack b5 b6",
                    "stack b5 b7",
                    "stack b5 b8",
                    "unstack b1 b5",
                    "unstack b2 b5",
                    "unstack b3 b5",
                    "unstack b4 b5",
                    "unstack b6 b5",
                    "unstack b7 b5",
                    "unstack b8 b5"
                ]
            },
            {
                "facts": [
                    "NegatedAtom clear(b5)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "pick-up b5",
                    "stack b1 b5",
                    "stack b2 b5",
                    "stack b3 b5",
                    "stack b4 b5",
                    "stack b6 b5",
                    "stack b7 b5",
                    "stack b8 b5"
                ]
            },
            {
                "facts": [
                    "Atom clear(b6)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "put-down b6",
                    "stack b6 b1",
                    "stack b6 b2",
                    "stack b6 b3",
                    "stack b6 b4",
                    "stack b6 b5",
                    "stack b6 b7",
                    "stack b6 b8",
                    "unstack b1 b6",
                    "unstack b2 b6",
                    "unstack b3 b6",
                    "unstack b4 b6",
                    "unstack b5 b6",
                    "unstack b7 b6",
                    "unstack b8 b6"
                ]
            },
            {
                "facts": [
                    "NegatedAtom clear(b6)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "stack b1 b6",
                    "stack b2 b6",
                    "stack b3 b6",
                    "stack b5 b6",
                    "stack b7 b6",
                    "stack b8 b6",
                    "unstack b6 b4"
                ]
            },
            {
                "facts": [
                    "Atom clear(b7)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "put-down b7",
                    "stack b7 b1",
                    "stack b7 b2",
                    "stack b7 b3",
                    "stack b7 b4",
                    "stack b7 b5",
                    "stack b7 b6",
                    "stack b7 b8",
                    "unstack b1 b7",
                    "unstack b2 b7",
                    "unstack b3 b7",
                    "unstack b4 b7",
                    "unstack b5 b7",
                    "unstack b6 b7",
                    "unstack b8 b7"
                ]
            },
            {
                "facts": [
                    "NegatedAtom clear(b7)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "stack b1 b7",
                    "stack b2 b7",
                    "stack b3 b7",
                    "stack b4 b7",
                    "stack b5 b7",
                    "stack b6 b7",
                    "unstack b7 b8"
                ]
            },
            {
                "facts": [
                    "Atom clear(b8)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "unstack b7 b8"
                ]
            },
            {
                "facts": [
                    "NegatedAtom clear(b8)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "pick-up b8",
                    "stack b1 b8",
                    "stack b2 b8",
                    "stack b3 b8",
                    "stack b4 b8",
                    "stack b5 b8",
                    "stack b6 b8",
                    "stack b7 b8"
                ]
            },
            {
                "facts": [
                    "Atom handempty()"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "put-down b1",
                    "put-down b2",
                    "put-down b3",
                    "put-down b4",
                    "put-down b5",
                    "put-down b6",
                    "put-down b7",
                    "put-down b8",
                    "stack b1 b2",
                    "stack b1 b3",
                    "stack b1 b4",
                    "stack b1 b5",
                    "stack b1 b6",
                    "stack b1 b7",
                    "stack b1 b8",
                    "stack b2 b1",
                    "stack b2 b3",
                    "stack b2 b4",
                    "stack b2 b5",
                    "stack b2 b6",
                    "stack b2 b7",
                    "stack b2 b8",
                    "stack b3 b1",
                    "stack b3 b2",
                    "stack b3 b4",
                    "stack b3 b5",
                    "stack b3 b6",
                    "stack b3 b7",
                    "stack b3 b8",
                    "stack b4 b1",
                    "stack b4 b2",
                    "stack b4 b3",
                    "stack b4 b5",
                    "stack b4 b6",
                    "stack b4 b7",
                    "stack b4 b8",
                    "stack b5 b1",
                    "stack b5 b2",
                    "stack b5 b3",
                    "stack b5 b4",
                    "stack b5 b6",
                    "stack b5 b7",
                    "stack b5 b8",
                    "stack b6 b1",
                    "stack b6 b2",
                    "stack b6 b3",
                    "stack b6 b4",
                    "stack b6 b5",
                    "stack b6 b7",
                    "stack b6 b8",
                    "stack b7 b1",
                    "stack b7 b2",
                    "stack b7 b3",
                    "stack b7 b4",
                    "stack b7 b5",
                    "stack b7 b6",
                    "stack b7 b8",
                    "stack b8 b1",
                    "stack b8 b2",
                    "stack b8 b3",
                    "stack b8 b4",
                    "stack b8 b5",
                    "stack b8 b6",
                    "stack b8 b7"
                ]
            },
            {
                "facts": [
                    "NegatedAtom handempty()"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "pick-up b3",
                    "pick-up b5",
                    "unstack b1 b2",
                    "unstack b6 b4",
                    "unstack b7 b8"
                ]
            },
            {
                "facts": [
                    "Atom holding(b1)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "unstack b1 b2"
                ]
            },
            {
                "facts": [
                    "Atom on(b1, b2)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "stack b1 b2"
                ]
            },
            {
                "facts": [
                    "Atom holding(b3)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "pick-up b3"
                ]
            },
            {
                "facts": [
                    "Atom ontable(b3)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "put-down b3"
                ]
            },
            {
                "facts": [
                    "Atom holding(b6)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "unstack b6 b4"
                ]
            },
            {
                "facts": [
                    "Atom on(b6, b4)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "stack b6 b4"
                ]
            },
            {
                "facts": [
                    "Atom holding(b7)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "unstack b7 b8"
                ]
            },
            {
                "facts": [
                    "Atom on(b7, b8)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "stack b7 b8"
                ]
            }
        ]
    }
}