{
    "domain": "checkers-jumping",
    "problem": "problem-3.pddl",
    "problem_num": 3,
    "trivial_state_landmarks": [
        "Atom empty(space5)",
        "Atom at(blue1, space6)",
        "Atom at(red4, space4)",
        "Atom at(red3, space3)",
        "Atom at(blue2, space7)",
        "Atom at(blue3, space8)",
        "Atom at(red2, space2)",
        "Atom at(red1, space1)",
        "Atom at(blue4, space9)"
    ],
    "non_trivial_state_landmarks": [
        "Atom at(blue1, space1)",
        "Atom at(red4, space9)",
        "Atom at(red3, space8)",
        "Atom at(blue2, space2)",
        "Atom at(blue3, space3)",
        "Atom at(red2, space7)",
        "Atom at(red1, space6)",
        "Atom at(blue4, space4)",
        "Atom empty(space1)",
        "Atom empty(space2)",
        "Atom empty(space3)",
        "Atom empty(space4)",
        "Atom empty(space6)",
        "Atom empty(space7)",
        "Atom empty(space8)",
        "Atom empty(space9)"
    ],
    "landmarks": [
        [
            "jump-red red4 blue4 space4 space5 space6",
            "slide-red red4 space4 space5",
            "jump-red red4 blue1 space4 space5 space6",
            "jump-red red4 blue2 space4 space5 space6",
            "jump-red red4 blue3 space4 space5 space6"
        ],
        [
            "jump-blue blue4 red1 space9 space8 space7",
            "jump-blue blue4 red4 space9 space8 space7",
            "jump-blue blue4 red2 space9 space8 space7",
            "jump-blue blue4 red3 space9 space8 space7",
            "slide-blue blue4 space9 space8"
        ],
        [
            "slide-blue blue1 space2 space1",
            "jump-blue blue1 red1 space3 space2 space1",
            "jump-blue blue1 red2 space3 space2 space1"
        ],
        [
            "slide-red red4 space8 space9",
            "jump-red red4 blue4 space7 space8 space9",
            "jump-red red4 blue3 space7 space8 space9"
        ],
        [
            "jump-blue blue2 red1 space4 space3 space2",
            "jump-blue blue2 red3 space4 space3 space2",
            "jump-blue blue2 red2 space4 space3 space2",
            "slide-blue blue2 space3 space2"
        ],
        [
            "jump-red red2 blue2 space5 space6 space7",
            "jump-red red2 blue4 space5 space6 space7",
            "slide-red red2 space6 space7",
            "jump-red red2 blue1 space5 space6 space7",
            "jump-red red2 blue3 space5 space6 space7"
        ],
        [
            "jump-red red3 blue2 space3 space4 space5",
            "jump-red red3 blue3 space3 space4 space5",
            "jump-red red3 blue1 space3 space4 space5",
            "slide-red red3 space3 space4",
            "jump-red red3 blue4 space3 space4 space5"
        ],
        [
            "jump-red red3 blue2 space6 space7 space8",
            "slide-red red3 space7 space8",
            "jump-red red3 blue3 space6 space7 space8",
            "jump-red red3 blue4 space6 space7 space8"
        ],
        [
            "jump-blue blue3 red2 space5 space4 space3",
            "jump-blue blue3 red3 space5 space4 space3",
            "slide-blue blue3 space4 space3",
            "jump-blue blue3 red1 space5 space4 space3",
            "jump-blue blue3 red4 space5 space4 space3"
        ],
        [
            "jump-blue blue2 red3 space7 space6 space5",
            "jump-blue blue2 red2 space7 space6 space5",
            "jump-blue blue2 red1 space7 space6 space5",
            "slide-blue blue2 space7 space6",
            "jump-blue blue2 red4 space7 space6 space5"
        ],
        [
            "jump-red red1 blue2 space4 space5 space6",
            "jump-red red1 blue4 space4 space5 space6",
            "slide-red red1 space5 space6",
            "jump-red red1 blue3 space4 space5 space6",
            "jump-red red1 blue1 space4 space5 space6"
        ],
        [
            "slide-blue blue1 space6 space5",
            "jump-blue blue1 red4 space6 space5 space4",
            "jump-blue blue1 red1 space6 space5 space4",
            "jump-blue blue1 red3 space6 space5 space4",
            "jump-blue blue1 red2 space6 space5 space4"
        ],
        [
            "slide-blue blue4 space5 space4",
            "jump-blue blue4 red3 space6 space5 space4",
            "jump-blue blue4 red4 space6 space5 space4",
            "jump-blue blue4 red1 space6 space5 space4",
            "jump-blue blue4 red2 space6 space5 space4"
        ],
        [
            "slide-red red2 space2 space3",
            "jump-red red2 blue4 space2 space3 space4",
            "jump-red red2 blue3 space2 space3 space4",
            "jump-red red2 blue1 space2 space3 space4",
            "jump-red red2 blue2 space2 space3 space4"
        ],
        [
            "jump-red red1 blue3 space1 space2 space3",
            "jump-red red1 blue2 space1 space2 space3",
            "jump-red red1 blue1 space1 space2 space3",
            "slide-red red1 space1 space2",
            "jump-red red1 blue4 space1 space2 space3"
        ],
        [
            "jump-blue blue3 red3 space8 space7 space6",
            "jump-blue blue3 red4 space8 space7 space6",
            "jump-blue blue3 red1 space8 space7 space6",
            "slide-blue blue3 space8 space7",
            "jump-blue blue3 red2 space8 space7 space6"
        ]
    ],
    "raw_landmarks": {
        "planner_output": "INFO     planner time limit: None\nINFO     planner memory limit: None\n\nINFO     Running translator.\nINFO     translator stdin: None\nINFO     translator time limit: None\nINFO     translator memory limit: None\nINFO     translator command line string: /home/james/repos/nl2pddl3/.venv/bin/python /home/james/repos/nl2pddl3/.venv/lib/python3.10/site-packages/forbiditerative/builds/release/bin/translate/translate.py /home/james/repos/nl2pddl3/data/domains/checkers-jumping/ground.pddl /home/james/repos/nl2pddl3/data/gen_problems/feedback/checkers-jumping/problem-3.pddl --sas-file output.sas\nParsing...\nParsing: [0.000s CPU, 0.002s wall-clock]\nNormalizing task... [0.000s CPU, 0.000s wall-clock]\nInstantiating...\nGenerating Datalog program... [0.000s CPU, 0.000s wall-clock]\nNormalizing Datalog program...\nNormalizing Datalog program: [0.000s CPU, 0.002s wall-clock]\nPreparing model... [0.000s CPU, 0.001s wall-clock]\nGenerated 43 rules.\nComputing model... [0.000s CPU, 0.005s wall-clock]\n349 relevant atoms\n690 auxiliary atoms\n1039 final queue length\n1387 total queue pushes\nCompleting instantiation... [0.010s CPU, 0.005s wall-clock]\nInstantiating: [0.010s CPU, 0.013s wall-clock]\nComputing fact groups...\nFinding invariants...\n5 initial candidates\nFinding invariants: [0.000s CPU, 0.002s wall-clock]\nChecking invariant weight... [0.000s CPU, 0.000s wall-clock]\nInstantiating groups... [0.000s CPU, 0.000s wall-clock]\nCollecting mutex groups... [0.000s CPU, 0.000s wall-clock]\nChoosing groups...\n0 uncovered facts\nChoosing groups: [0.000s CPU, 0.000s wall-clock]\nBuilding translation key... [0.000s CPU, 0.000s wall-clock]\nComputing fact groups: [0.000s CPU, 0.003s wall-clock]\nBuilding STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]\nBuilding dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]\nBuilding mutex information...\nBuilding mutex information: [0.000s CPU, 0.000s wall-clock]\nTranslating task...\nProcessing axioms...\nSimplifying axioms... [0.000s CPU, 0.000s wall-clock]\nTranslator axioms removed by simplifying: 0\nComputing negative axioms... [0.000s CPU, 0.000s wall-clock]\nProcessing axioms: [0.000s CPU, 0.000s wall-clock]\nTranslating task: [0.010s CPU, 0.004s wall-clock]\n0 effect conditions simplified\n0 implied preconditions added\nDetecting unreachable propositions...\n0 operators removed\n0 axioms removed\n9 propositions removed\nDetecting unreachable propositions: [0.000s CPU, 0.002s wall-clock]\nReordering and filtering variables...\n9 of 9 variables necessary.\n9 of 18 mutex groups necessary.\n204 of 204 operators necessary.\n0 of 0 axiom rules necessary.\nReordering and filtering variables: [0.000s CPU, 0.001s wall-clock]\nTranslator variables: 9\nTranslator derived variables: 0\nTranslator facts: 69\nTranslator goal facts: 9\nTranslator mutex groups: 9\nTranslator total mutex groups size: 69\nTranslator operators: 204\nTranslator axioms: 0\nTranslator task size: 1328\nTranslator peak memory: 28772 KB\nWriting output... [0.000s CPU, 0.001s wall-clock]\nDone! [0.020s CPU, 0.026s wall-clock]\ntranslate exit code: 0\n\nINFO     Running search (/home/james/repos/nl2pddl3/.venv/lib/python3.10/site-packages/forbiditerative/builds/release/bin).\nINFO     search stdin: output.sas\nINFO     search time limit: None\nINFO     search memory limit: None\nINFO     search command line string: /home/james/repos/nl2pddl3/.venv/lib/python3.10/site-packages/forbiditerative/builds/release/bin/downward --evaluator 'h=lmcount(lm_factory=lm_exhaust(),dump_action_landmarks=true)' --always --search 'lazy_greedy([h,const(infinity())])' --internal-plan-file sas_plan < output.sas\n[t=3.7133e-05s, 11192 KB] reading input...\n[t=0.000892751s, 11324 KB] done reading input!\n[t=0.00197806s, 11720 KB] Initializing landmark count heuristic...\n[t=0.00203869s, 11720 KB] Generating landmark graph...\n[t=0.00207585s, 11720 KB] Initializing Exploration...\n[t=0.00219444s, 11720 KB] Generating landmarks by testing all facts with RPG method\n[t=0.00301973s, 11852 KB] Removed 0 reasonable or obedient reasonable orders\n[t=0.00305882s, 11852 KB] Landmarks generation time: 0.00102086s\n[t=0.00307752s, 11852 KB] Discovered 25 landmarks, of which 0 are disjunctive and 0 are conjunctive.\n[t=0.00308781s, 11852 KB] 0 edges\n[t=0.00309614s, 11852 KB] Landmark graph generation time: 0.00106564s\n[t=0.00310628s, 11852 KB] Landmark graph contains 25 landmarks, of which 0 are disjunctive and 0 are conjunctive.\n[t=0.00311625s, 11852 KB] Landmark graph contains 0 orderings.\n[t=0.00312561s, 11852 KB] Dumping landmarks from landmark graph: \n[t=0.00324793s, 11852 KB] Action landmarks end.\n[t=0.00334241s, 11852 KB] Building successor generator...done!\n[t=0.00346644s, 11852 KB] peak memory difference for successor generator creation: 0 KB\n[t=0.00348652s, 11852 KB] time for successor generation creation: 6.4115e-05s\n[t=0.00350137s, 11852 KB] Variables: 9\n[t=0.00352344s, 11852 KB] FactPairs: 69\n[t=0.00353596s, 11852 KB] Bytes per state: 4\n[t=0.00364244s, 11852 KB] Conducting lazy best first search, (real) bound = 2147483647\n[t=0.00371716s, 11852 KB] 9 initial landmarks, 9 goal landmarks\n[t=0.00374708s, 11852 KB] Initial heuristic value for lmcount(lm_factory = lm_exhaust, dump_action_landmarks = true): 16\n[t=0.00377084s, 11852 KB] Completely explored state space -- no solution!\n[t=0.00381597s, 11852 KB] Actual search time: 8.6148e-05s\n[t=0.00383153s, 11852 KB] Expanded 0 state(s).\n[t=0.00383153s, 11852 KB] Reopened 0 state(s).\n[t=0.00383153s, 11852 KB] Evaluated 1 state(s).\n[t=0.00383153s, 11852 KB] Evaluations: 1\n[t=0.00383153s, 11852 KB] Generated 0 state(s).\n[t=0.00383153s, 11852 KB] Dead ends: 1 state(s).\n[t=0.00383153s, 11852 KB] Number of registered states: 1\n[t=0.00383153s, 11852 KB] Int hash set load factor: 1/1 = 1\n[t=0.00383153s, 11852 KB] Int hash set resizes: 0\n[t=0.00383153s, 11852 KB] Search time: 0.000189528s\n[t=0.00383153s, 11852 KB] Total time: 0.00383153s\nSearch stopped without finding a solution.\nPeak memory: 11852 KB\nRemove intermediate file output.sas\nsearch exit code: 12\n\nDriver aborting after search\nINFO     Planner time: 0.09s\n",
        "planner_error": "",
        "landmarks": [
            {
                "facts": [
                    "Atom at(blue1, space1)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "jump-blue blue1 red1 space3 space2 space1",
                    "jump-blue blue1 red2 space3 space2 space1",
                    "slide-blue blue1 space2 space1"
                ]
            },
            {
                "facts": [
                    "Atom at(red4, space9)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "jump-red red4 blue3 space7 space8 space9",
                    "jump-red red4 blue4 space7 space8 space9",
                    "slide-red red4 space8 space9"
                ]
            },
            {
                "facts": [
                    "Atom at(red3, space8)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "jump-red red3 blue2 space6 space7 space8",
                    "jump-red red3 blue3 space6 space7 space8",
                    "jump-red red3 blue4 space6 space7 space8",
                    "slide-red red3 space7 space8"
                ]
            },
            {
                "facts": [
                    "Atom at(blue2, space2)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "jump-blue blue2 red1 space4 space3 space2",
                    "jump-blue blue2 red2 space4 space3 space2",
                    "jump-blue blue2 red3 space4 space3 space2",
                    "slide-blue blue2 space3 space2"
                ]
            },
            {
                "facts": [
                    "Atom at(blue3, space3)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "jump-blue blue3 red1 space5 space4 space3",
                    "jump-blue blue3 red2 space5 space4 space3",
                    "jump-blue blue3 red3 space5 space4 space3",
                    "jump-blue blue3 red4 space5 space4 space3",
                    "slide-blue blue3 space4 space3"
                ]
            },
            {
                "facts": [
                    "Atom at(red2, space7)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "jump-red red2 blue1 space5 space6 space7",
                    "jump-red red2 blue2 space5 space6 space7",
                    "jump-red red2 blue3 space5 space6 space7",
                    "jump-red red2 blue4 space5 space6 space7",
                    "slide-red red2 space6 space7"
                ]
            },
            {
                "facts": [
                    "Atom at(red1, space6)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "jump-red red1 blue1 space4 space5 space6",
                    "jump-red red1 blue2 space4 space5 space6",
                    "jump-red red1 blue3 space4 space5 space6",
                    "jump-red red1 blue4 space4 space5 space6",
                    "slide-red red1 space5 space6"
                ]
            },
            {
                "facts": [
                    "Atom at(blue4, space4)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "jump-blue blue4 red1 space6 space5 space4",
                    "jump-blue blue4 red2 space6 space5 space4",
                    "jump-blue blue4 red3 space6 space5 space4",
                    "jump-blue blue4 red4 space6 space5 space4",
                    "slide-blue blue4 space5 space4"
                ]
            },
            {
                "facts": [
                    "Atom empty(space5)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "jump-blue blue1 red1 space5 space4 space3",
                    "jump-blue blue1 red2 space5 space4 space3",
                    "jump-blue blue1 red3 space5 space4 space3",
                    "jump-blue blue1 red4 space5 space4 space3",
                    "jump-blue blue2 red1 space5 space4 space3",
                    "jump-blue blue2 red2 space5 space4 space3",
                    "jump-blue blue2 red3 space5 space4 space3",
                    "jump-blue blue2 red4 space5 space4 space3",
                    "jump-blue blue3 red1 space5 space4 space3",
                    "jump-blue blue3 red2 space5 space4 space3",
                    "jump-blue blue3 red3 space5 space4 space3",
                    "jump-blue blue3 red4 space5 space4 space3",
                    "jump-blue blue4 red1 space5 space4 space3",
                    "jump-blue blue4 red2 space5 space4 space3",
                    "jump-blue blue4 red3 space5 space4 space3",
                    "jump-blue blue4 red4 space5 space4 space3",
                    "jump-red red1 blue1 space5 space6 space7",
                    "jump-red red1 blue2 space5 space6 space7",
                    "jump-red red1 blue3 space5 space6 space7",
                    "jump-red red1 blue4 space5 space6 space7",
                    "jump-red red2 blue1 space5 space6 space7",
                    "jump-red red2 blue2 space5 space6 space7",
                    "jump-red red2 blue3 space5 space6 space7",
                    "jump-red red2 blue4 space5 space6 space7",
                    "jump-red red3 blue1 space5 space6 space7",
                    "jump-red red3 blue2 space5 space6 space7",
                    "jump-red red3 blue3 space5 space6 space7",
                    "jump-red red3 blue4 space5 space6 space7",
                    "jump-red red4 blue1 space5 space6 space7",
                    "jump-red red4 blue2 space5 space6 space7",
                    "jump-red red4 blue3 space5 space6 space7",
                    "jump-red red4 blue4 space5 space6 space7",
                    "slide-blue blue1 space5 space4",
                    "slide-blue blue2 space5 space4",
                    "slide-blue blue3 space5 space4",
                    "slide-blue blue4 space5 space4",
                    "slide-red red1 space5 space6",
                    "slide-red red2 space5 space6",
                    "slide-red red3 space5 space6",
                    "slide-red red4 space5 space6"
                ]
            },
            {
                "facts": [
                    "Atom at(blue1, space6)"
                ],
                "disjunctive": "False",
                "first_achievers": []
            },
            {
                "facts": [
                    "Atom at(red4, space4)"
                ],
                "disjunctive": "False",
                "first_achievers": []
            },
            {
                "facts": [
                    "Atom at(red3, space3)"
                ],
                "disjunctive": "False",
                "first_achievers": []
            },
            {
                "facts": [
                    "Atom at(blue2, space7)"
                ],
                "disjunctive": "False",
                "first_achievers": []
            },
            {
                "facts": [
                    "Atom at(blue3, space8)"
                ],
                "disjunctive": "False",
                "first_achievers": []
            },
            {
                "facts": [
                    "Atom at(red2, space2)"
                ],
                "disjunctive": "False",
                "first_achievers": []
            },
            {
                "facts": [
                    "Atom at(red1, space1)"
                ],
                "disjunctive": "False",
                "first_achievers": []
            },
            {
                "facts": [
                    "Atom at(blue4, space9)"
                ],
                "disjunctive": "False",
                "first_achievers": []
            },
            {
                "facts": [
                    "Atom empty(space1)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "jump-red red1 blue1 space1 space2 space3",
                    "jump-red red1 blue2 space1 space2 space3",
                    "jump-red red1 blue3 space1 space2 space3",
                    "jump-red red1 blue4 space1 space2 space3",
                    "slide-red red1 space1 space2"
                ]
            },
            {
                "facts": [
                    "Atom empty(space2)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "jump-red red2 blue1 space2 space3 space4",
                    "jump-red red2 blue2 space2 space3 space4",
                    "jump-red red2 blue3 space2 space3 space4",
                    "jump-red red2 blue4 space2 space3 space4",
                    "slide-red red2 space2 space3"
                ]
            },
            {
                "facts": [
                    "Atom empty(space3)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "jump-red red3 blue1 space3 space4 space5",
                    "jump-red red3 blue2 space3 space4 space5",
                    "jump-red red3 blue3 space3 space4 space5",
                    "jump-red red3 blue4 space3 space4 space5",
                    "slide-red red3 space3 space4"
                ]
            },
            {
                "facts": [
                    "Atom empty(space4)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "jump-red red4 blue1 space4 space5 space6",
                    "jump-red red4 blue2 space4 space5 space6",
                    "jump-red red4 blue3 space4 space5 space6",
                    "jump-red red4 blue4 space4 space5 space6",
                    "slide-red red4 space4 space5"
                ]
            },
            {
                "facts": [
                    "Atom empty(space6)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "jump-blue blue1 red1 space6 space5 space4",
                    "jump-blue blue1 red2 space6 space5 space4",
                    "jump-blue blue1 red3 space6 space5 space4",
                    "jump-blue blue1 red4 space6 space5 space4",
                    "slide-blue blue1 space6 space5"
                ]
            },
            {
                "facts": [
                    "Atom empty(space7)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "jump-blue blue2 red1 space7 space6 space5",
                    "jump-blue blue2 red2 space7 space6 space5",
                    "jump-blue blue2 red3 space7 space6 space5",
                    "jump-blue blue2 red4 space7 space6 space5",
                    "slide-blue blue2 space7 space6"
                ]
            },
            {
                "facts": [
                    "Atom empty(space8)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "jump-blue blue3 red1 space8 space7 space6",
                    "jump-blue blue3 red2 space8 space7 space6",
                    "jump-blue blue3 red3 space8 space7 space6",
                    "jump-blue blue3 red4 space8 space7 space6",
                    "slide-blue blue3 space8 space7"
                ]
            },
            {
                "facts": [
                    "Atom empty(space9)"
                ],
                "disjunctive": "False",
                "first_achievers": [
                    "jump-blue blue4 red1 space9 space8 space7",
                    "jump-blue blue4 red2 space9 space8 space7",
                    "jump-blue blue4 red3 space9 space8 space7",
                    "jump-blue blue4 red4 space9 space8 space7",
                    "slide-blue blue4 space9 space8"
                ]
            }
        ]
    }
}