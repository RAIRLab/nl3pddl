trial,domain_path,provider,model,give_pred_descriptions,desc_class,feedback_pipeline,hde_runs,hde_timeout,action_timeout,action_timeout_cause,evals_passed,total_evals,domain_raw
2025-07-18_03-36-07,data/domains/flow,openai,gpt-4o-mini,True,first,landmark-val,1,False,False,,0,20,"
        (define (domain flow)
            (:requirements :strips :typing)
            (:types color
location)
            (:predicates (not-empty ?loc - location)
(flow-end ?loc - location)
(flow-complete ?color - color)
(offboard)
(adjacent ?loc1 - location ?loc2 - location)
(empty ?loc - location))

            (:action draw-path :parameters (?loc1 - location ?loc2 - location ?color - color) :precondition (and (not-empty ?loc1) (not-empty ?loc2) (flow-end ?loc1) (adjacent ?loc1 ?loc2) (empty ?loc2)) :effect (and (not (empty ?loc2)) (not-empty ?loc2) (not (flow-complete ?color))))
(:action begin-flow :parameters (?loc - location ?color - color) :precondition (and (flow-end ?loc) (offboard) (empty ?loc)) :effect (and (not (offboard)) (not (empty ?loc)) (not-empty ?loc)))
(:action extend-flow :parameters (?currentLoc - location ?nextLoc - location ?color - color) :precondition (and (not-empty ?currentLoc) (adjacent ?currentLoc ?nextLoc) (empty ?nextLoc)) :effect (and (not (empty ?nextLoc)) (not-empty ?nextLoc)))
(:action complete-flow :parameters (?endLoc1 - location ?endLoc2 - location ?color - color) :precondition (and (not-empty ?endLoc1) (flow-end ?endLoc2) (adjacent ?endLoc1 ?endLoc2)) :effect (and (flow-complete ?color) (not (not-empty ?endLoc1)) (not (not-empty ?endLoc2))))
        )
    "
2025-07-18_03-36-07,data/domains/blocks,openai,gpt-4o-mini,True,first,landmark-val,1,False,False,,18,20,"
        (define (domain blocks)
            (:requirements :strips :typing)
            (:types block)
            (:predicates (ontable ?x - block)
(handempty)
(clear ?x - block)
(on ?x - block ?y - block)
(holding ?x - block))

            (:action stack :parameters (?x ?y - block) :precondition (and (clear ?y) (holding ?x)) :effect (and (not (clear ?y)) (not (holding ?x)) (on ?x ?y)))
(:action pick-up :parameters (?x - block) :precondition (and (ontable ?x) (clear ?x) (handempty)) :effect (and (not (ontable ?x)) (not (clear ?x)) (holding ?x) (not (handempty)))
)
(:action put-down :parameters (?x - block) :precondition (and (holding ?x)) :effect (and (ontable ?x) (clear ?x) (not (holding ?x)) (handempty)))
(:action stack :parameters (?x - block ?y - block) :precondition (and (holding ?x) (clear ?y)) :effect (and (not (holding ?x)) (not (clear ?y)) (on ?x ?y) (handempty)))
(:action pick-up-from-stack :parameters (?x - block ?y - block) :precondition (and (on ?x ?y) (clear ?x) (handempty)) :effect (and (not (on ?x ?y)) (holding ?x) (not (handempty)) (not (clear ?x)))
)
        )
    "
2025-07-18_03-36-07,data/domains/miconic,openai,gpt-4o-mini,True,first,landmark-val,1,False,False,,18,20,"
        (define (domain miconic)
            (:requirements :strips :typing)
            (:types floor
passenger)
            (:predicates (destin ?p - passenger ?f - floor)
(lift-at ?f - floor)
(origin ?p - passenger ?f - floor)
(not-boarded ?p - passenger)
(above ?f1 - floor ?f2 - floor)
(served ?p - passenger)
(not-served ?p - passenger))

            (:action board :parameters (?p - passenger ?f - floor) :precondition (and (not-boarded ?p) (lift-at ?f) (origin ?p ?f)) :effect (and (not (not-boarded ?p)) (served ?p)))
(:action board-elevator :parameters (?p - passenger ?f - floor) :precondition (and (not-boarded ?p) (lift-at ?f) (origin ?p ?f)) :effect (and (not (not-boarded ?p)) (not (lift-at ?f)) (not-served ?p)))
(:action depart-elevator :parameters (?p - passenger ?f - floor) :precondition (and (served ?p) (lift-at ?f) (destin ?p ?f)) :effect (and (not (served ?p)) (not (lift-at ?f)) (not-served ?p)))
(:action move-up :parameters (?f1 - floor ?f2 - floor) :precondition (and (lift-at ?f1) (above ?f1 ?f2)) :effect (and (not (lift-at ?f1)) (lift-at ?f2)))
(:action move-down :parameters (?f1 - floor ?f2 - floor) :precondition (and (lift-at ?f1) (above ?f2 ?f1)) :effect (and (not (lift-at ?f1)) (lift-at ?f2)))
        )
    "
2025-07-18_03-36-07,data/domains/bookseller,openai,gpt-4o-mini,True,first,landmark-val,1,False,False,,0,18,"
        (define (domain bookseller)
            (:requirements :strips :typing)
            (:types location
book
drone)
            (:predicates (path ?from - location ?to - location)
(book-at ?b - book ?l - location)
(drone-at ?d - drone ?l - location)
(empty ?d - drone)
(holding ?b - book ?d - drone)
(bottom-book ?b - book ?d - drone))

            (:action transport :parameters (?b - book ?d - drone ?from - location ?to - location) :precondition (and (book-at ?b ?from) (drone-at ?d ?from) (empty ?d) (path ?from ?to)) :effect (and (not (book-at ?b ?from)) (book-at ?b ?to) (not (empty ?d)) (not (drone-at ?d ?from)) (drone-at ?d ?to)))
(:action pick-up :parameters (?b - book ?d - drone ?l - location) :precondition (and (book-at ?b ?l) (drone-at ?d ?l) (empty ?d)) :effect (and (not (book-at ?b ?l)) (not (empty ?d)) (holding ?b ?d)))
(:action pick-bottom-up :parameters (?b - book ?d - drone ?l - location) :precondition (and (book-at ?b ?l) (drone-at ?d ?l) (empty ?d) (bottom-book ?b ?l)) :effect (and (not (book-at ?b ?l)) (not (empty ?d)) (holding ?b ?d)))
(:action drop-off :parameters (?b - book ?d - drone ?l - location) :precondition (and (holding ?b ?d) (drone-at ?d ?l)) :effect (and (book-at ?b ?l) (empty ?d) (not (holding ?b ?d))))
(:action drop-bottom :parameters (?b - book ?d - drone ?l - location) :precondition (and (holding ?b ?d) (drone-at ?d ?l) (bottom-book ?b ?d)) :effect (and (book-at ?b ?l) (empty ?d) (not (holding ?b ?d))))
(:action fly :parameters (?d - drone ?from - location ?to - location) :precondition (and (drone-at ?d ?from) (path ?from ?to) (empty ?d)) :effect (and (not (drone-at ?d ?from)) (drone-at ?d ?to)))
        )
    "
2025-07-18_03-36-07,data/domains/checkers-jumping,openai,gpt-4o-mini,True,first,landmark-val,1,False,False,,0,20,"
        (define (domain checkers-jumping)
            (:requirements :strips :typing)
            (:types checker
space)
            (:predicates (at ?c - checker ?s - space)
(right-of ?s1 - space ?s2 - space)
(left-of ?s1 - space ?s2 - space)
(is-blue ?c - checker)
(is-red ?c - checker)
(empty ?s - space))

            (:action move :parameters (?c - checker ?s1 ?s2 - space) :precondition (and (at ?c ?s1) (right-of ?s2 ?s1) (empty ?s2)) :effect (and (not (at ?c ?s1)) (at ?c ?s2) (not (empty ?s2))) )
(:action move-red-checker :parameters (?c - checker ?s1 ?s2 - space) :precondition (and (at ?c ?s1) (right-of ?s2 ?s1) (is-red ?c) (empty ?s2)) :effect (and (not (at ?c ?s1)) (at ?c ?s2) (not (empty ?s2))) )
(:action move-blue-checker :parameters (?c - checker ?s1 ?s2 - space) :precondition (and (at ?c ?s1) (right-of ?s2 ?s1) (is-blue ?c) (empty ?s2)) :effect (and (not (at ?c ?s1)) (at ?c ?s2) (not (empty ?s2))) )
(:action jump-over-checker :parameters (?c - checker ?s1 ?s2 ?s3 - space) :precondition (and (at ?c ?s1) (right-of ?s2 ?s1) (at ?c2 ?s2) (empty ?s3)) :effect (and (not (at ?c ?s1)) (at ?c ?s3) (not (empty ?s3)) (not (at ?c2 ?s2))) )
(:action jump-over-checker :parameters (?c - checker ?c2 - checker ?s1 ?s2 ?s3 - space) :precondition (and (at ?c ?s1) (at ?c2 ?s2) (right-of ?s2 ?s1) (empty ?s3)) :effect (and (not (at ?c ?s1)) (at ?c ?s3) (not (empty ?s3)) (not (at ?c2 ?s2))) )
        )
    "
2025-07-18_03-36-07,data/domains/flow,openai,gpt-4o-mini,True,first,landmark-val,1,False,False,,0,20,"
        (define (domain flow)
            (:requirements :strips :typing)
            (:types color
location)
            (:predicates (not-empty ?l - location)
(flow-end ?l - location)
(flow-complete ?c - color)
(offboard)
(adjacent ?l1 - location ?l2 - location)
(empty ?l - location))

            (:action draw-path :parameters (?c - color ?l1 ?l2 - location) :precondition (and (not-empty ?l1) (flow-end ?l1) (empty ?l2) (adjacent ?l1 ?l2)) :effect (and (not (empty ?l2)) (not (not-empty ?l1)) (flow-complete ?l1) (not (offboard)))
)
(:action begin-flow :parameters (?c - color ?l - location) :precondition (and (flow-end ?l) (not (flow-complete ?c)) (offboard)) :effect (and (not (offboard)) (not (flow-end ?l)) (not (empty ?l)) (not-empty ?l)))
(:action extend-flow :parameters (?c - color ?l1 ?l2 - location) :precondition (and (not-empty ?l1) (empty ?l2) (adjacent ?l1 ?l2) (not (flow-complete ?c))) :effect (and (not (empty ?l2)) (not (empty ?l1)) (not (offboard)) (not (empty ?l1)) (not (flow-end ?l1)))
)
(:action complete-flow :parameters (?c - color ?l1 ?l2 - location) :precondition (and (not-empty ?l1) (flow-end ?l2) (adjacent ?l1 ?l2) (not (flow-complete ?c))) :effect (and (flow-complete ?c) (not (empty ?l2)) (not (empty ?l1)) (not (flow-end ?l2)) (not (offboard)))
)
        )
    "
2025-07-18_03-36-07,data/domains/blocks,openai,gpt-4o-mini,True,first,landmark-val,1,False,False,,18,20,"
        (define (domain blocks)
            (:requirements :strips :typing)
            (:types block)
            (:predicates (handempty)
(on ?x - block ?y - block)
(ontable ?x - block)
(clear ?x - block)
(holding ?x - block))

            (:action stack :parameters (?x - block ?y - block) :precondition (and (holding ?x) (clear ?y)) :effect (and (on ?x ?y) (clear ?x) (not (holding ?x)) (not (clear ?y))))
(:action pick-up :parameters (?x - block) :precondition (and (ontable ?x) (clear ?x) (handempty)) :effect (and (not (ontable ?x)) (holding ?x) (not (handempty)) (not (clear ?x))))
(:action put-down :parameters (?x - block) :precondition (and (holding ?x)) :effect (and (ontable ?x) (clear ?x) (not (holding ?x)) (handempty)))
(:action stack :parameters (?x - block ?y - block) :precondition (and (holding ?x) (clear ?y)) :effect (and (on ?x ?y) (not (holding ?x)) (clear ?y)))
(:action pick-up-from :parameters (?x - block ?y - block) :precondition (and (on ?x ?y) (clear ?x) (handempty)) :effect (and (not (on ?x ?y)) (holding ?x) (not (handempty)) (not (clear ?y))) )
        )
    "
2025-07-18_03-36-07,data/domains/miconic,openai,gpt-4o-mini,True,first,landmark-val,1,False,False,,0,20,"
        (define (domain miconic)
            (:requirements :strips :typing)
            (:types floor
passenger)
            (:predicates (destin ?p - passenger ?f - floor)
(lift-at ?f - floor)
(origin ?p - passenger ?f - floor)
(not-boarded ?p - passenger)
(above ?f1 - floor ?f2 - floor)
(served ?p - passenger)
(not-served ?p - passenger))

            (:action board :parameters (?p - passenger ?f - floor) :precondition (and (not-boarded ?p) (lift-at ?f)) :effect (and (not (not-boarded ?p)) (origin ?f)))
(:action board :parameters (?p - passenger ?f - floor) :precondition (and (not-boarded ?p) (lift-at ?f)) :effect (and (not (not-boarded ?p)) (origin ?f)))
(:action depart :parameters (?p - passenger ?f - floor) :precondition (and (lift-at ?f) (not (not-served ?p))) :effect (and (served ?p) (not (not-served ?p))))
(:action move-up :parameters (?f1 - floor ?f2 - floor) :precondition (and (lift-at ?f1) (above ?f2 ?f1)) :effect (and (not (lift-at ?f1)) (lift-at ?f2)))
(:action move-down :parameters (?f1 - floor ?f2 - floor) :precondition (and (lift-at ?f1) (above ?f1 ?f2)) :effect (and (not (lift-at ?f1)) (lift-at ?f2)))
        )
    "
2025-07-18_03-36-07,data/domains/bookseller,openai,gpt-4o-mini,True,first,landmark-val,1,False,False,,0,18,"
        (define (domain bookseller)
            (:requirements :strips :typing)
            (:types location
book
drone)
            (:predicates (path ?l1 - location ?l2 - location)
(book-at ?b - book ?l - location)
(drone-at ?d - drone ?l - location)
(empty ?d - drone)
(holding ?b - book ?d - drone)
(bottom-book ?b - book ?d - drone))

            (:action transport :parameters (?b - book ?d - drone ?l1 - location ?l2 - location) :precondition (and (book-at ?b ?l1) (drone-at ?d ?l1) (path ?l1 ?l2) (empty ?d)) :effect (and (not (book-at ?b ?l1)) (book-at ?b ?l2) (not (empty ?d)) (drone-at ?d ?l2)) )
(:action pick-up :parameters (?b - book ?d - drone ?l - location) :precondition (and (book-at ?b ?l) (drone-at ?d ?l) (empty ?d)) :effect (and (not (book-at ?b ?l)) (not (empty ?d)) (holding ?b ?d)) )
(:action pick-up-bottom :parameters (?b - book ?d - drone ?l - location) :precondition (and (book-at ?b ?l) (drone-at ?d ?l) (empty ?d) (bottom-book ?b ?l)) :effect (and (not (book-at ?b ?l)) (not (empty ?d)) (holding ?b ?d)) )
(:action drop-off :parameters (?b - book ?d - drone ?l - location) :precondition (and (holding ?b ?d) (drone-at ?d ?l)) :effect (and (not (holding ?b ?d)) (book-at ?b ?l) (empty ?d)))
(:action drop-off-bottom :parameters (?b - book ?d - drone ?l - location) :precondition (and (holding ?b ?d) (drone-at ?d ?l) (bottom-book ?b ?d)) :effect (and (not (holding ?b ?d)) (book-at ?b ?l) (empty ?d)))
(:action fly :parameters (?d - drone ?l1 - location ?l2 - location) :precondition (and (drone-at ?d ?l1) (path ?l1 ?l2)) :effect (and (not (drone-at ?d ?l1)) (drone-at ?d ?l2)))
        )
    "
2025-07-18_03-36-07,data/domains/checkers-jumping,openai,gpt-4o-mini,True,first,landmark-val,1,False,False,,20,20,"
        (define (domain checkers-jumping)
            (:requirements :strips :typing)
            (:types checker
space)
            (:predicates (at ?c - checker ?s - space)
(right-of ?s1 - space ?s2 - space)
(left-of ?s1 - space ?s2 - space)
(is-blue ?c - checker)
(is-red ?c - checker)
(empty ?s - space))

            (:action move-checker :parameters (?c - checker ?s1 ?s2 - space) :precondition (and (at ?c ?s1) (empty ?s2) (right-of ?s1 ?s2)) :effect (and (not (at ?c ?s1)) (at ?c ?s2) (not (empty ?s2)))
)
(:action move-red-checker :parameters (?c - checker ?s1 ?s2 - space) :precondition (and (at ?c ?s1) (empty ?s2) (is-red ?c) (right-of ?s1 ?s2)) :effect (and (not (at ?c ?s1)) (at ?c ?s2) (not (empty ?s2)))
)
(:action move-blue-checker :parameters (?c - checker ?s1 ?s2 - space) :precondition (and (at ?c ?s1) (empty ?s2) (is-blue ?c) (right-of ?s1 ?s2)) :effect (and (not (at ?c ?s1)) (at ?c ?s2) (not (empty ?s2)))
)
(:action jump-over-checker :parameters (?c - checker ?c2 - checker ?s1 ?s2 ?s3 - space) :precondition (and (at ?c ?s1) (at ?c2 ?s2) (empty ?s3) (right-of ?s1 ?s2) (right-of ?s2 ?s3)) :effect (and (not (at ?c ?s1)) (at ?c ?s3) (not (empty ?s3)) (not (at ?c2 ?s2)))
)
(:action jump-over-adjacent-checker :parameters (?c - checker ?c2 - checker ?s1 ?s2 ?s3 - space) :precondition (and (at ?c ?s1) (at ?c2 ?s2) (empty ?s3) (right-of ?s1 ?s2) (right-of ?s2 ?s3)) :effect (and (not (at ?c ?s1)) (at ?c ?s3) (not (empty ?s3)) (not (at ?c2 ?s2)))
)
        )
    "
2025-07-18_03-36-07,data/domains/flow,openai,gpt-4o-mini,True,first,landmark-val,1,False,False,,0,20,"
        (define (domain flow)
            (:requirements :strips :typing)
            (:types color
location)
            (:predicates (not-empty ?loc - location)
(flow-end ?loc - location)
(flow-complete ?col - color)
(offboard)
(adjacent ?loc1 - location ?loc2 - location)
(empty ?loc - location))

            (:action draw-path :parameters (?loc1 ?loc2 - location ?col - color) :precondition (and (not-empty ?loc1) (flow-end ?loc1) (empty ?loc2) (adjacent ?loc1 ?loc2) (offboard)) :effect (and (not (empty ?loc2)) (not (offboard)) (color ?loc2 ?col))
)
(:action begin-flow :parameters (?loc - location ?col - color) :precondition (and (flow-end ?loc) (not-empty ?loc) (offboard)) :effect (and (not (offboard)) (flow-complete ?col)))
(:action extend-flow :parameters (?loc1 ?loc2 - location ?col - color) :precondition (and (flow-complete ?col) (not-empty ?loc1) (empty ?loc2) (adjacent ?loc1 ?loc2)) :effect (and (not (empty ?loc2)) (not (flow-complete ?col)) (color ?loc2 ?col)))
(:action complete-flow :parameters (?loc1 ?loc2 - location ?col - color) :precondition (and (flow-end ?loc1) (not-empty ?loc1) (not-empty ?loc2) (adjacent ?loc1 ?loc2)) :effect (and (flow-complete ?col) (not (empty ?loc2)) (not (empty ?loc1))))
        )
    "
2025-07-18_03-36-07,data/domains/blocks,openai,gpt-4o-mini,True,first,landmark-val,1,False,False,,10,20,"
        (define (domain blocks)
            (:requirements :strips :typing)
            (:types block)
            (:predicates (ontable ?x - block)
(handempty)
(clear ?x - block)
(on ?x - block ?y - block)
(holding ?x - block))

            (:action stack :parameters (?x - block ?y - block) :precondition (and (clear ?y) (holding ?x)) :effect (and (not (holding ?x)) (not (clear ?y)) (on ?x ?y) (clear ?x)))
(:action pick-up :parameters (?x - block) :precondition (and (ontable ?x) (clear ?x) (handempty)) :effect (and (not (ontable ?x)) (holding ?x) (not (handempty)) (not (clear ?x))))
(:action put-down :parameters (?x - block) :precondition (holding ?x) :effect (and (ontable ?x) (not (holding ?x)) (clear ?x) (handempty)))
(:action stack :parameters (?x - block ?y - block) :precondition (and (holding ?x) (clear ?y)) :effect (and (not (holding ?x)) (on ?x ?y) (not (clear ?y)) (clear ?x)))
(:action unstack :parameters (?x - block ?y - block) :precondition (and (on ?x ?y) (clear ?x) (holding ?y)) :effect (and (not (on ?x ?y)) (holding ?x) (clear ?y) (not (clear ?x)) (not (handempty))))
        )
    "
2025-07-18_03-36-07,data/domains/miconic,openai,gpt-4o-mini,True,first,landmark-val,1,False,False,,18,20,"
        (define (domain miconic)
            (:requirements :strips :typing)
            (:types floor
passenger)
            (:predicates (destin ?p - passenger ?f - floor)
(lift-at ?f - floor)
(origin ?p - passenger ?f - floor)
(not-boarded ?p - passenger)
(above ?f1 - floor ?f2 - floor)
(served ?p - passenger)
(not-served ?p - passenger))

            (:action board :parameters (?p - passenger ?f - floor) :precondition (and (not-boarded ?p) (lift-at ?f)) :effect (and (not (not-boarded ?p)) (origin ?p ?f)))
(:action board :parameters (?p - passenger ?f - floor) :precondition (and (not-boarded ?p) (lift-at ?f)) :effect (and (not (not-boarded ?p)) (origin ?p ?f)))
(:action depart :parameters (?p - passenger ?f - floor) :precondition (and (lift-at ?f) (origin ?p ?f) (not-served ?p)) :effect (and (served ?p) (not (not-served ?p))))
(:action move-up :parameters (?f1 ?f2 - floor) :precondition (and (lift-at ?f1) (above ?f1 ?f2)) :effect (and (not (lift-at ?f1)) (lift-at ?f2)))
(:action move-down :parameters (?f1 ?f2 - floor) :precondition (and (lift-at ?f1) (above ?f2 ?f1)) :effect (and (not (lift-at ?f1)) (lift-at ?f2)))
        )
    "
2025-07-18_03-36-07,data/domains/bookseller,openai,gpt-4o-mini,True,first,landmark-val,1,False,False,,0,18,"
        (define (domain bookseller)
            (:requirements :strips :typing)
            (:types location
book
drone)
            (:predicates (path ?loc1 - location ?loc2 - location)
(book-at ?b - book ?loc - location)
(drone-at ?d - drone ?loc - location)
(empty ?d - drone)
(holding ?b - book ?d - drone)
(bottom-book ?b - book ?d - drone)
(final-book ?b - book ?d - drone))

            (:action transport-book :parameters (?b - book ?d - drone ?loc1 - location ?loc2 - location) :precondition (and (book-at ?b ?loc1) (drone-at ?d ?loc1) (empty ?d) (path ?loc1 ?loc2)) :effect (and (not (book-at ?b ?loc1)) (book-at ?b ?loc2) (not (empty ?d)) (not (drone-at ?d ?loc1)) (drone-at ?d ?loc2)) )
(:action pick-up-book :parameters (?b - book ?d - drone ?loc - location) :precondition (and (book-at ?b ?loc) (drone-at ?d ?loc) (empty ?d)) :effect (and (not (book-at ?b ?loc)) (holding ?b ?d) (not (empty ?d))) )
(:action pick-up-bottom-book :parameters (?b - book ?d - drone ?loc - location) :precondition (and (book-at ?b ?loc) (drone-at ?d ?loc) (empty ?d) (bottom-book ?b ?loc)) :effect (and (not (book-at ?b ?loc)) (holding ?b ?d) (not (empty ?d))) )
(:action drop-off-book :parameters (?b - book ?d - drone ?loc - location) :precondition (and (holding ?b ?d) (drone-at ?d ?loc) (not (empty ?d)) (final-book ?b ?d)) :effect (and (book-at ?b ?loc) (not (holding ?b ?d)) (empty ?d)))
(:action drop-off-bottom-book :parameters (?b - book ?d - drone ?loc - location) :precondition (and (holding ?b ?d) (drone-at ?d ?loc) (not (empty ?d)) (bottom-book ?b ?d)) :effect (and (book-at ?b ?loc) (not (holding ?b ?d)) (empty ?d)))
(:action fly :parameters (?d - drone ?loc1 - location ?loc2 - location) :precondition (and (drone-at ?d ?loc1) (path ?loc1 ?loc2)) :effect (and (not (drone-at ?d ?loc1)) (drone-at ?d ?loc2)))
        )
    "
2025-07-18_03-36-07,data/domains/checkers-jumping,openai,gpt-4o-mini,True,first,landmark-val,1,False,False,,0,20,"
        (define (domain checkers-jumping)
            (:requirements :strips :typing)
            (:types checker
space)
            (:predicates (at ?c - checker ?s - space)
(right-of ?s1 - space ?s2 - space)
(left-of ?s1 - space ?s2 - space)
(is-blue ?c - checker)
(is-red ?c - checker)
(empty ?s - space))

            (:action move_checker :parameters (?c - checker ?s1 ?s2 - space) :precondition (and (at ?c ?s1) (empty ?s2) (right-of ?s2 ?s1)) :effect (and (not (at ?c ?s1)) (at ?c ?s2) (not (empty ?s2))) )
(:action move_red_checker :parameters (?c - checker ?s1 ?s2 - space) :precondition (and (at ?c ?s1) (is-red ?c) (empty ?s2) (right-of ?s2 ?s1)) :effect (and (not (at ?c ?s1)) (at ?c ?s2) (not (empty ?s2))) )
(:action move_blue_checker :parameters (?c - checker ?s1 ?s2 - space) :precondition (and (at ?c ?s1) (is-blue ?c) (empty ?s2) (right-of ?s2 ?s1)) :effect (and (not (at ?c ?s1)) (at ?c ?s2) (not (empty ?s2))) )
(:action jump_over_checker :parameters (?c - checker ?c2 - checker ?s1 ?s3 - space) :precondition (and (at ?c ?s1) (at ?c2 ?s2) (empty ?s3) (right-of ?c2 ?s1) (right-of ?s3 ?c2)) :effect (and (not (at ?c ?s1)) (at ?c ?s3) (not (empty ?s3))) )
(:action jump_over_adjacent_checker :parameters (?c - checker ?c2 - checker ?s1 ?s3 - space) :precondition (and (at ?c ?s1) (at ?c2 ?s2) (empty ?s3) (right-of ?c2 ?s1) (right-of ?s3 ?c2)) :effect (and (not (at ?c ?s1)) (at ?c ?s3) (not (empty ?s3)) (not (at ?c2 ?s2))) )
        )
    "
2025-07-18_03-36-07,data/domains/flow,openai,gpt-4o-mini,True,first,landmark-val,1,False,False,,0,20,"
        (define (domain flow)
            (:requirements :strips :typing)
            (:types color
location)
            (:predicates (not-empty ?loc - location)
(flow-end ?loc - location)
(flow-complete ?color - color)
(offboard)
(adjacent ?loc1 - location ?loc2 - location)
(empty ?loc - location))

            (:action draw-path :parameters (?loc1 ?loc2 - location ?color - color) :precondition (and (not (empty ?loc1)) (not (empty ?loc2)) (flow-end ?loc1) (flow-end ?loc2) (not (flow-complete ?color)) (adjacent ?loc1 ?loc2)) :effect (and (not (empty ?loc1)) (not (empty ?loc2)) (not (flow-end ?loc1)) (not (flow-end ?loc2)) (not (offboard)) (not (adjacent ?loc1 ?loc2)))
)
(:action begin-flow :parameters (?loc - location ?color - color) :precondition (and (flow-end ?loc) (not (flow-complete ?color)) (empty ?loc)) :effect (and (not (empty ?loc)) (not (flow-end ?loc)) (not (offboard)) (not (flow-complete ?color)))
)
(:action extend-flow :parameters (?currentLoc ?nextLoc - location ?color - color) :precondition (and (not (empty ?nextLoc)) (flow-end ?currentLoc) (adjacent ?currentLoc ?nextLoc) (not (flow-complete ?color))) :effect (and (not (empty ?nextLoc)) (not (flow-end ?currentLoc)) (not (empty ?currentLoc)) (not (offboard)))
)
(:action complete-flow :parameters (?loc1 ?loc2 - location ?color - color) :precondition (and (flow-end ?loc1) (flow-end ?loc2) (adjacent ?loc1 ?loc2) (not (flow-complete ?color))) :effect (and (flow-complete ?color) (not (empty ?loc1)) (not (empty ?loc2)) (not (offboard)) (not (adjacent ?loc1 ?loc2)))
)
        )
    "
2025-07-18_03-36-07,data/domains/blocks,openai,gpt-4o-mini,True,first,landmark-val,1,False,False,,10,20,"
        (define (domain blocks)
            (:requirements :strips :typing)
            (:types block)
            (:predicates (ontable ?x - block)
(handempty)
(clear ?x - block)
(on ?x - block ?y - block)
(holding ?x - block))

            (:action stack :parameters (?x - block ?y - block) :precondition (and (holding ?x) (clear ?y)) :effect (and (not (holding ?x)) (not (clear ?y)) (on ?x ?y) (clear ?x)))
(:action pick-up :parameters (?x - block) :precondition (and (ontable ?x) (clear ?x) (handempty)) :effect (and (not (ontable ?x)) (holding ?x) (not (handempty)) (not (clear ?x))))
(:action put-down :parameters (?x - block) :precondition (and (holding ?x)) :effect (and (ontable ?x) (not (holding ?x)) (clear ?x) (handempty)))
(:action stack :parameters (?x - block ?y - block) :precondition (and (holding ?x) (clear ?y)) :effect (and (not (holding ?x)) (not (clear ?y)) (on ?x ?y) (clear ?x)))
(:action unstack :parameters (?x - block ?y - block) :precondition (and (on ?x ?y) (clear ?x) (handempty)) :effect (and (not (on ?x ?y)) (holding ?x) (not (handempty)) (clear ?y)))
        )
    "
2025-07-18_03-36-07,data/domains/miconic,openai,gpt-4o-mini,True,first,landmark-val,1,False,False,,18,20,"
        (define (domain miconic)
            (:requirements :strips :typing)
            (:types floor
passenger)
            (:predicates (destin ?p - passenger ?f - floor)
(lift-at ?f - floor)
(origin ?p - passenger ?f - floor)
(not-boarded ?p - passenger)
(above ?f1 - floor ?f2 - floor)
(served ?p - passenger)
(not-served ?p - passenger))

            (:action board :parameters (?p - passenger ?f - floor) :precondition (and (not-boarded ?p) (lift-at ?f) (origin ?p ?f)) :effect (and (not (not-boarded ?p)) (not (origin ?p ?f)))
)
(:action board :parameters (?p - passenger ?f - floor) :precondition (and (not-boarded ?p) (lift-at ?f) (origin ?p ?f)) :effect (and (not (not-boarded ?p)) (not (origin ?p ?f)) (served ?p))
)
(:action depart :parameters (?p - passenger ?f - floor) :precondition (and (lift-at ?f) (served ?p)) :effect (and (not (served ?p)) (not (lift-at ?f)) (not (origin ?p ?f)))
)
(:action move-up :parameters (?f1 ?f2 - floor) :precondition (and (lift-at ?f1) (above ?f1 ?f2)) :effect (and (not (lift-at ?f1)) (lift-at ?f2))
)
(:action move-down :parameters (?f1 ?f2 - floor) :precondition (and (lift-at ?f1) (above ?f2 ?f1)) :effect (and (not (lift-at ?f1)) (lift-at ?f2))
)
        )
    "
2025-07-18_03-36-07,data/domains/bookseller,openai,gpt-4o-mini,True,first,landmark-val,1,False,False,,0,18,"
        (define (domain bookseller)
            (:requirements :strips :typing)
            (:types location
book
drone)
            (:predicates (path ?l1 - location ?l2 - location)
(book-at ?b - book ?l - location)
(drone-at ?d - drone ?l - location)
(empty ?d - drone)
(holding ?b - book ?d - drone)
(bottom-book ?b - book ?d - drone))

            (:action transport :parameters (?b - book ?d - drone ?l1 - location ?l2 - location) :precondition (and (book-at ?b ?l1) (drone-at ?d ?l1) (path ?l1 ?l2) (empty ?d)) :effect (and (not (book-at ?b ?l1)) (book-at ?b ?l2) (not (empty ?d)) (not (drone-at ?d ?l1)) (drone-at ?d ?l2)))
(:action pick-up :parameters (?b - book ?d - drone ?l - location) :precondition (and (book-at ?b ?l) (drone-at ?d ?l) (empty ?d)) :effect (and (not (book-at ?b ?l)) (not (empty ?d)) (holding ?b ?d)))
(:action pick-up-bottom :parameters (?b - book ?d - drone ?l - location) :precondition (and (book-at ?b ?l) (drone-at ?d ?l) (empty ?d) (bottom-book ?b ?l)) :effect (and (not (book-at ?b ?l)) (not (empty ?d)) (holding ?b ?d)))
(:action drop-off :parameters (?b - book ?d - drone ?l - location) :precondition (and (holding ?b ?d) (drone-at ?d ?l)) :effect (and (not (holding ?b ?d)) (book-at ?b ?l) (empty ?d)))
(:action drop-off-bottom :parameters (?b - book ?d - drone ?l - location) :precondition (and (holding ?b ?d) (drone-at ?d ?l) (bottom-book ?b ?d)) :effect (and (not (holding ?b ?d)) (book-at ?b ?l) (empty ?d)))
(:action fly :parameters (?d - drone ?l1 - location ?l2 - location) :precondition (and (drone-at ?d ?l1) (path ?l1 ?l2)) :effect (and (not (drone-at ?d ?l1)) (drone-at ?d ?l2)))
        )
    "
2025-07-18_03-36-07,data/domains/checkers-jumping,openai,gpt-4o-mini,True,first,landmark-val,1,False,False,,20,20,"
        (define (domain checkers-jumping)
            (:requirements :strips :typing)
            (:types checker
space)
            (:predicates (at ?c - checker ?s - space)
(right-of ?s1 - space ?s2 - space)
(left-of ?s1 - space ?s2 - space)
(is-blue ?c - checker)
(is-red ?c - checker)
(empty ?s - space))

            (:action move-checker :parameters (?c - checker ?s1 - space ?s2 - space) :precondition (and (at ?c ?s1) (right-of ?s1 ?s2) (empty ?s2)) :effect (and (not (at ?c ?s1)) (at ?c ?s2) (not (empty ?s2))) )
(:action move-red-checker :parameters (?c - checker ?s1 - space ?s2 - space) :precondition (and (at ?c ?s1) (is-red ?c) (right-of ?s1 ?s2) (empty ?s2)) :effect (and (not (at ?c ?s1)) (at ?c ?s2) (not (empty ?s2))) )
(:action move-blue-checker :parameters (?c - checker ?s1 - space ?s2 - space) :precondition (and (at ?c ?s1) (is-blue ?c) (right-of ?s1 ?s2) (empty ?s2)) :effect (and (not (at ?c ?s1)) (at ?c ?s2) (not (empty ?s2))) )
(:action jump-over-checker :parameters (?c - checker ?c2 - checker ?s1 - space ?s2 - space ?s3 - space) :precondition (and (at ?c ?s1) (at ?c2 ?s2) (empty ?s3) (right-of ?s1 ?s2) (right-of ?s2 ?s3)) :effect (and (not (at ?c ?s1)) (at ?c ?s3) (not (empty ?s3))) )
(:action jump-over-adjacent-checker :parameters (?c - checker ?c2 - checker ?s1 - space ?s2 - space ?s3 - space) :precondition (and (at ?c ?s1) (at ?c2 ?s2) (empty ?s3) (right-of ?s1 ?s2) (right-of ?s2 ?s3)) :effect (and (not (at ?c ?s1)) (at ?c ?s3) (not (empty ?s3)) (not (at ?c2 ?s2))) )
        )
    "
2025-07-18_03-36-07,data/domains/flow,openai,gpt-4o-mini,True,first,landmark-val,1,False,False,,0,20,"
        (define (domain flow)
            (:requirements :strips :typing)
            (:types color
location)
            (:predicates (not-empty ?loc - location)
(flow-end ?loc - location)
(flow-complete ?c - color)
(offboard)
(adjacent ?loc1 - location ?loc2 - location)
(empty ?loc - location))

            (:action draw-path :parameters (?start - location ?end - location ?c - color) :precondition (and (not-empty ?start) (flow-end ?start) (not-empty ?end) (empty ?end) (adjacent ?start ?end)) :effect (and (not (empty ?end)) (not (empty ?start)) (not (flow-end ?end)) (not (flow-end ?start))))
(:action begin-flow :parameters (?start - location ?c - color) :precondition (and (flow-end ?start) (not (flow-complete ?c)) (empty ?start)) :effect (and (not (empty ?start)) (not (flow-end ?start)) (not (offboard)) (not (flow-complete ?c))))
(:action extend-flow :parameters (?current - location ?next - location ?c - color) :precondition (and (not (empty ?next)) (adjacent ?current ?next) (not (flow-complete ?c))) :effect (and (empty ?next) (not (empty ?current)) (not (flow-end ?current))))
(:action complete-flow :parameters (?start - location ?end - location ?c - color) :precondition (and (flow-end ?start) (flow-end ?end) (not (flow-complete ?c)) (adjacent ?start ?end)) :effect (and (flow-complete ?c) (not (empty ?start)) (not (empty ?end)) (not (flow-end ?start)) (not (flow-end ?end))))
        )
    "
2025-07-18_03-36-07,data/domains/blocks,openai,gpt-4o-mini,True,first,landmark-val,1,False,False,,10,20,"
        (define (domain blocks)
            (:requirements :strips :typing)
            (:types block)
            (:predicates (ontable ?x - block)
(handempty)
(clear ?x - block)
(on ?x - block ?y - block)
(holding ?x - block))

            (:action stack :parameters (?x - block ?y - block) :precondition (and (clear ?y) (holding ?x)) :effect (and (not (holding ?x)) (not (clear ?y)) (on ?x ?y) (clear ?x)))
(:action pick-up :parameters (?x - block) :precondition (and (ontable ?x) (clear ?x) (handempty)) :effect (and (not (ontable ?x)) (holding ?x) (not (handempty)) (not (clear ?x))))
(:action put-down :parameters (?x - block) :precondition (holding ?x) :effect (and (ontable ?x) (clear ?x) (not (holding ?x)) (handempty)))
(:action stack :parameters (?x - block ?y - block) :precondition (and (holding ?x) (clear ?y)) :effect (and (not (holding ?x)) (not (clear ?y)) (on ?x ?y)))
(:action unstack :parameters (?x - block ?y - block) :precondition (and (on ?x ?y) (clear ?x) (handempty)) :effect (and (not (on ?x ?y)) (holding ?x) (not (clear ?y))))
        )
    "
2025-07-18_03-36-07,data/domains/miconic,openai,gpt-4o-mini,True,first,landmark-val,1,False,False,,0,20,"
        (define (domain miconic)
            (:requirements :strips :typing)
            (:types floor
passenger)
            (:predicates (destin ?p - passenger ?f - floor)
(lift-at ?f - floor)
(origin ?p - passenger ?f - floor)
(not-boarded ?p - passenger)
(served ?p - passenger)
(not-served ?p - passenger)
(above ?f1 - floor ?f2 - floor)
(boarded ?p - passenger))

            (:action board :parameters (?p - passenger ?f - floor) :precondition (and (not-boarded ?p) (lift-at ?f) (origin ?p ?f)) :effect (and (not (not-boarded ?p)) (not (origin ?p ?f)) (not (destination ?p ?f)) (boarded ?p))
)
(:action board :parameters (?p - passenger ?f - floor) :precondition (and (not-boarded ?p) (lift-at ?f) (origin ?p ?f)) :effect (and (not (not-boarded ?p)) (boarded ?p) (not (origin ?p ?f)) (not (lift-at ?f)))
)
(:action depart :parameters (?p - passenger ?f - floor) :precondition (and (boarded ?p) (lift-at ?f) (destin ?p ?f)) :effect (and (not (boarded ?p)) (served ?p) (not (destin ?p ?f)) (not (lift-at ?f)))
)
(:action move-up :parameters (?f1 ?f2 - floor) :precondition (and (lift-at ?f1) (above ?f2 ?f1)) :effect (and (not (lift-at ?f1)) (lift-at ?f2) (not (above ?f2 ?f1)))
)
(:action move-down :parameters (?f1 ?f2 - floor) :precondition (and (lift-at ?f1) (above ?f1 ?f2)) :effect (and (not (lift-at ?f1)) (lift-at ?f2) (not (above ?f1 ?f2)))
)
        )
    "
2025-07-18_03-36-07,data/domains/bookseller,openai,gpt-4o-mini,True,first,landmark-val,1,False,False,,0,18,"
        (define (domain bookseller)
            (:requirements :strips :typing)
            (:types location
book
drone)
            (:predicates (path ?location1 - location ?location2 - location)
(book-at ?b - book ?l - location)
(drone-at ?d - drone ?l - location)
(empty ?d - drone)
(holding ?b - book ?d - drone)
(bottom-book ?b - book ?l - location))

            (:action transport :parameters (?d - drone ?b - book ?from - location ?to - location) :precondition (and (drone-at ?d ?from) (book-at ?b ?from) (empty ?d) (path ?from ?to)) :effect (and (not (book-at ?b ?from)) (book-at ?b ?to) (not (drone-at ?d ?from)) (drone-at ?d ?to) (not (empty ?d)))
)
(:action pick-up :parameters (?d - drone ?b - book ?l - location) :precondition (and (drone-at ?d ?l) (book-at ?b ?l) (empty ?d)) :effect (and (not (book-at ?b ?l)) (not (empty ?d)) (holding ?b ?d))
)
(:action pick-up-bottom :parameters (?d - drone ?b - book ?l - location) :precondition (and (drone-at ?d ?l) (book-at ?b ?l) (empty ?d) (bottom-book ?b ?l)) :effect (and (not (book-at ?b ?l)) (not (empty ?d)) (holding ?b ?d))
)
(:action drop-off :parameters (?d - drone ?b - book ?l - location) :precondition (and (drone-at ?d ?l) (holding ?b ?d)) :effect (and (not (holding ?b ?d)) (book-at ?b ?l) (empty ?d))
)
(:action drop-off-bottom :parameters (?d - drone ?b - book ?l - location) :precondition (and (drone-at ?d ?l) (holding ?b ?d) (bottom-book ?b ?d)) :effect (and (not (holding ?b ?d)) (book-at ?b ?l) (empty ?d))
)
(:action fly :parameters (?d - drone ?from - location ?to - location) :precondition (and (drone-at ?d ?from) (path ?from ?to)) :effect (and (not (drone-at ?d ?from)) (drone-at ?d ?to))
)
        )
    "
2025-07-18_03-36-07,data/domains/checkers-jumping,openai,gpt-4o-mini,True,first,landmark-val,1,False,False,,20,20,"
        (define (domain checkers-jumping)
            (:requirements :strips :typing)
            (:types checker
space)
            (:predicates (at ?c - checker ?s - space)
(right-of ?s1 - space ?s2 - space)
(left-of ?s1 - space ?s2 - space)
(is-blue ?c - checker)
(is-red ?c - checker)
(empty ?s - space))

            (:action move :parameters (?c - checker ?s1 - space ?s2 - space) :precondition (and (at ?c ?s1) (empty ?s2) (right-of ?s1 ?s2)) :effect (and (not (at ?c ?s1)) (at ?c ?s2) (not (empty ?s2)))
)
(:action move-red-checker :parameters (?c - checker ?s1 - space ?s2 - space) :precondition (and (at ?c ?s1) (is-red ?c) (empty ?s2) (right-of ?s1 ?s2)) :effect (and (not (at ?c ?s1)) (at ?c ?s2) (not (empty ?s2)))
)
(:action move-blue-checker :parameters (?c - checker ?s1 - space ?s2 - space) :precondition (and (at ?c ?s1) (is-blue ?c) (empty ?s2) (right-of ?s1 ?s2)) :effect (and (not (at ?c ?s1)) (at ?c ?s2) (not (empty ?s2)))
)
(:action jump-over :parameters (?c - checker ?j - checker ?s1 - space ?s2 - space ?s3 - space) :precondition (and (at ?c ?s1) (at ?j ?s2) (empty ?s3) (right-of ?s1 ?s2) (right-of ?s2 ?s3)) :effect (and (not (at ?c ?s1)) (at ?c ?s3) (not (empty ?s3)) (not (at ?j ?s2)))
)
(:action jump-over :parameters (?c - checker ?j - checker ?s1 - space ?s2 - space ?s3 - space) :precondition (and (at ?c ?s1) (at ?j ?s2) (empty ?s3) (right-of ?s1 ?s2) (right-of ?s2 ?s3)) :effect (and (not (at ?c ?s1)) (at ?c ?s3) (not (empty ?s3)) (not (at ?j ?s2)))
)
        )
    "
