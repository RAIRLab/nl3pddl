trial,domain_path,provider,model,give_pred_descriptions,desc_class,feedback_pipeline,hde_runs,hde_timeout,action_timeout,action_timeout_cause,evals_passed,total_evals,domain_raw
2025-07-18_03-51-51,data/domains/flow,openai,o4-mini,True,first,validate,1,False,False,,20,20,"
        (define (domain flow)
            (:requirements :strips :typing)
            (:types color
location)
            (:predicates (flow-complete ?c - color)
(adjacent ?l1 - location ?l2 - location)
(flow-end ?l - location ?c - color)
(offboard)
(not-empty ?l - location)
(empty ?l - location)
(at ?l - location)
(drawing ?c - color))

            (:action start-flow
 :parameters (?l - location ?c - color)
 :precondition (and (offboard) (flow-end ?l ?c) (empty ?l))
 :effect (and (not (offboard)) (at ?l) (drawing ?c) (not (empty ?l)))
)
(:action start-flow
 :parameters (?l - location ?c - color)
 :precondition (and (offboard) (flow-end ?l ?c) (empty ?l))
 :effect (and (not (offboard)) (at ?l) (drawing ?c) (not (empty ?l)) (not-empty ?l))
)
(:action extend-flow
 :parameters (?c - color ?from - location ?to - location)
 :precondition (and (drawing ?c) (at ?from) (adjacent ?from ?to) (empty ?to))
 :effect (and
   (not (empty ?to))
   (not (at ?from))
   (at ?to)
   (not-empty ?to)
 )
)
(:action complete-flow
 :parameters (?c - color ?from - location ?to - location)
 :precondition (and (drawing ?c) (at ?from) (adjacent ?from ?to) (flow-end ?to ?c))
 :effect (and
   (not (drawing ?c))
   (not (empty ?to))
   (not (at ?from))
   (at ?to)
   (flow-complete ?c)
   (not-empty ?to)
 )
)
        )
    "
2025-07-18_03-51-51,data/domains/flow,openai,o4-mini,True,first,landmark-val,1,False,False,,20,20,"
        (define (domain flow)
            (:requirements :strips :typing)
            (:types color
location)
            (:predicates (flow-complete ?c - color)
(adjacent ?l1 - location ?l2 - location)
(flow-end ?l - location ?c - color)
(offboard)
(empty ?l - location)
(not-empty ?l - location)
(current ?c - color ?l - location))

            (:action start-flow
    :parameters (?c - color ?l - location)
    :precondition (and (offboard) (flow-end ?l ?c) (empty ?l))
    :effect (and (not (offboard))
                 (not (empty ?l))
                 (not-empty ?l)
                 (current ?c ?l)))
(:action begin-flow
    :parameters (?c - color ?l - location)
    :precondition (and (offboard)
                       (flow-end ?l ?c)
                       (empty ?l))
    :effect (and (not (offboard))
                 (not (empty ?l))
                 (not-empty ?l)
                 (current ?c ?l)))
(:action extend-flow
    :parameters (?c - color ?from - location ?to - location)
    :precondition (and (current ?c ?from)
                       (adjacent ?from ?to)
                       (empty ?to))
    :effect (and (not (empty ?to))
                 (not-empty ?to)
                 (not (current ?c ?from))
                 (current ?c ?to)))
(:action complete-flow
    :parameters (?c - color ?from - location ?lend - location)
    :precondition (and (current ?c ?from)
                       (adjacent ?from ?lend)
                       (flow-end ?lend ?c))
    :effect (and (not (current ?c ?from))
                 (flow-complete ?c)
                 (offboard)))
        )
    "
2025-07-18_03-51-51,data/domains/flow,openai,o4-mini,True,detailed-first,validate,1,False,False,,20,20,"
        (define (domain flow)
            (:requirements :strips :typing)
            (:types color
location)
            (:predicates (flow-complete ?c - color)
(adjacent ?l1 - location ?l2 - location)
(flow-end ?l - location ?c - color)
(offboard)
(not-empty ?l - location)
(empty ?l - location)
(current-color ?c - color)
(current-loc ?l - location)
(flow-path ?l - location ?c - color))

            (:action start-flow
    :parameters (?c - color ?l - location)
    :precondition (and
        (offboard)
        (flow-end ?l ?c)
        (empty ?l)
    )
    :effect (and
        (not (offboard))
        (not (empty ?l))
        (current-color ?c)
        (current-loc ?l)
    )
)
(:action begin-flow
    :parameters (?c - color ?l - location)
    :precondition (and
        (offboard)
        (flow-end ?l ?c)
        (empty ?l)
    )
    :effect (and
        (not (offboard))
        (not (empty ?l))
        (not-empty ?l)
        (current-color ?c)
        (current-loc ?l)
        (flow-path ?l ?c)
    )
)
(:action extend-flow
    :parameters (?c - color ?l_old - location ?l_new - location)
    :precondition (and
        (current-color ?c)
        (current-loc ?l_old)
        (adjacent ?l_old ?l_new)
        (empty ?l_new)
    )
    :effect (and
        (not (empty ?l_new))
        (not (current-loc ?l_old))
        (not-empty ?l_new)
        (flow-path ?l_new ?c)
        (current-loc ?l_new)
    )
)
(:action complete-flow
    :parameters (?c - color ?l_old - location ?l_end - location)
    :precondition (and
        (current-color ?c)
        (current-loc ?l_old)
        (adjacent ?l_old ?l_end)
        (flow-end ?l_end ?c)
        (empty ?l_end)
    )
    :effect (and
        (not (current-loc ?l_old))
        (not (empty ?l_end))
        (not (current-color ?c))
        (offboard)
        (flow-path ?l_end ?c)
        (flow-complete ?c)
    )
)
        )
    "
2025-07-18_03-51-51,data/domains/flow,openai,o4-mini,True,detailed-first,landmark-val,1,False,False,,0,20,"
        (define (domain flow)
            (:requirements :strips :typing)
            (:types color
location)
            (:predicates (flow-complete ?c - color)
(adjacent ?l1 - location ?l2 - location)
(flow-end ?c - color ?l - location)
(offboard)
(not-empty ?l - location)
(empty ?l - location)
(current ?c - color ?l - location)
(filled ?c - color ?l - location))

            (:action start-flow
 :parameters (?c - color ?l - location)
 :precondition (and (offboard) (flow-end ?c ?l) (empty ?l))
 :effect (and (not (offboard)) (not (empty ?l)) (current ?c ?l))
)
(:action start-flow
 :parameters (?c - color ?l - location)
 :precondition (and (offboard) (flow-end ?c ?l) (empty ?l))
 :effect (and (not (offboard)) (not (empty ?l)) (not-empty ?l) (current ?c ?l))
)
(:action extend-flow
 :parameters (?c - color ?from - location ?to - location)
 :precondition (and (current ?c ?from) (adjacent ?from ?to) (empty ?to))
 :effect (and
    (not (empty ?to))
    (not-empty ?to)
    (filled ?c ?to)
    (not (current ?c ?from))
    (current ?c ?to)
 )
)
(:action complete-flow
 :parameters (?c - color ?from - location ?to - location)
 :precondition (and
    (current ?c ?from)
    (adjacent ?from ?to)
    (flow-end ?c ?to)
    (empty ?to)
 )
 :effect (and
    (not (current ?c ?from))
    (not (empty ?to))
    (not-empty ?to)
    (filled ?c ?to)
    (flow-complete ?c)
    (offboard)
 )
)
        )
    "
2025-07-18_03-51-51,data/domains/blocks,openai,o4-mini,True,first,validate,0,False,False,,0,0,
2025-07-18_03-51-51,data/domains/blocks,openai,o4-mini,True,first,landmark-val,1,False,False,,12,20,"
        (define (domain blocks)
            (:requirements :strips :typing)
            (:types block)
            (:predicates (handempty)
(holding ?x - block)
(ontable ?x - block)
(clear ?x - block)
(on ?x - block ?y - block))

            (:action stack
 :parameters (?x - block ?y - block)
 :precondition (and (holding ?x) (clear ?y))
 :effect (and
   (not (holding ?x))
   (handempty)
   (on ?x ?y)
   (clear ?x)
   (not (clear ?y))
 )
)
(:action pick-up
 :parameters (?x - block)
 :precondition (and (ontable ?x) (clear ?x) (handempty))
 :effect (and
   (not (ontable ?x))
   (not (clear ?x))
   (not (handempty))
   (holding ?x)
 )
)
(:action put-down
 :parameters (?x - block)
 :precondition (and (holding ?x))
 :effect (and
   (ontable ?x)
   (clear ?x)
   (handempty)
   (not (holding ?x))
 ))
(:action stack
 :parameters (?x - block ?y - block)
 :precondition (and (holding ?x) (clear ?y))
 :effect (and
   (not (holding ?x))
   (not (clear ?y))
   (handempty)
   (on ?x ?y)
   (clear ?x)
 ))
(:action unstack
 :parameters (?x - block ?y - block)
 :precondition (and (on ?x ?y) (clear ?x) (handempty))
 :effect (and
   (holding ?x)
   (clear ?y)
   (not (on ?x ?y))
   (not (clear ?x))
   (not (handempty))
 )
)
        )
    "
2025-07-18_03-51-51,data/domains/blocks,openai,o4-mini,True,detailed-first,validate,10,True,False,,12,20,"(define (domain blocks)
  (:requirements :strips :typing)
  (:types block)
  (:predicates
    (handempty)
    (holding ?x - block)
    (ontable ?x - block)
    (on ?x - block ?y - block)
    (clear ?x - block)
  )

  ;; pick up a clear block from the table
  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x)
                       (clear ?x)
                       (handempty))
    :effect (and (holding ?x)
                 (not (ontable ?x))
                 (not (clear ?x))
                 (not (handempty)))
  )

  ;; pick up a clear block from atop another block
  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y)
                       (clear ?x)
                       (handempty))
    :effect (and (holding ?x)
                 (not (on ?x ?y))
                 (clear ?y)
                 (not (clear ?x))
                 (not (handempty)))
  )

  ;; put a held block down on the table
  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (ontable ?x)
                 (clear ?x)
                 (handempty)
                 (not (holding ?x)))
  )

  ;; stack a held block onto a clear block
  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x)
                       (clear ?y))
    :effect (and (on ?x ?y)
                 (clear ?x)
                 (handempty)
                 (not (holding ?x))
                 (not (clear ?y)))
  )
)"
2025-07-18_03-51-51,data/domains/blocks,openai,o4-mini,True,detailed-first,landmark-val,1,False,False,,12,20,"
        (define (domain blocks)
            (:requirements :strips :typing)
            (:types block)
            (:predicates (handempty)
(ontable ?x - block)
(on ?x - block ?y - block)
(clear ?x - block)
(holding ?x - block))

            (:action stack
 :parameters (?x - block ?y - block)
 :precondition (and (holding ?x) (clear ?y))
 :effect (and (not (holding ?x)) (not (clear ?y)) (handempty) (on ?x ?y) (clear ?x)))
(:action pick-up
 :parameters (?x - block)
 :precondition (and (ontable ?x) (clear ?x) (handempty))
 :effect (and (holding ?x)
              (not (ontable ?x))
              (not (clear ?x))
              (not (handempty))))
(:action put-down
 :parameters (?x - block)
 :precondition (and (holding ?x))
 :effect (and (ontable ?x)
              (clear ?x)
              (handempty)
              (not (holding ?x))))
(:action stack
 :parameters (?x - block ?y - block)
 :precondition (and (holding ?x) (clear ?y))
 :effect (and (not (holding ?x))
              (handempty)
              (on ?x ?y)
              (clear ?x)
              (not (clear ?y))))
(:action unstack
 :parameters (?x - block ?y - block)
 :precondition (and (on ?x ?y) (clear ?x) (handempty))
 :effect (and (holding ?x)
              (clear ?y)
              (not (on ?x ?y))
              (not (clear ?x))
              (not (handempty))))
        )
    "
2025-07-18_03-51-51,data/domains/miconic,openai,o4-mini,True,first,validate,1,False,False,,20,20,"
        (define (domain miconic)
            (:requirements :strips :typing)
            (:types passenger
floor)
            (:predicates (lift-at ?f - floor)
(above ?f1 - floor ?f2 - floor)
(destin ?p - passenger ?f - floor)
(not-boarded ?p - passenger)
(not-served ?p - passenger)
(served ?p - passenger)
(origin ?p - passenger ?f - floor)
(boarded ?p - passenger))

            (:action move-up
    :parameters (?from ?to - floor)
    :precondition (and (lift-at ?from) (above ?to ?from))
    :effect (and (not (lift-at ?from)) (lift-at ?to)))
(:action board-passenger
    :parameters (?p - passenger ?f - floor)
    :precondition (and (lift-at ?f) (origin ?p ?f) (not-boarded ?p))
    :effect (and (boarded ?p) (not (not-boarded ?p))))
(:action depart-passenger
    :parameters (?p - passenger ?f - floor)
    :precondition (and (lift-at ?f) (destin ?p ?f) (boarded ?p) (not-served ?p))
    :effect (and (served ?p) (not (not-served ?p)) (not (boarded ?p))))
(:action move-up
    :parameters (?from ?to - floor)
    :precondition (and (lift-at ?from) (above ?to ?from))
    :effect (and (not (lift-at ?from)) (lift-at ?to)))
(:action move-down
    :parameters (?from ?to - floor)
    :precondition (and (lift-at ?from) (above ?from ?to))
    :effect (and (not (lift-at ?from)) (lift-at ?to)))
        )
    "
2025-07-18_03-51-51,data/domains/miconic,openai,o4-mini,True,first,landmark-val,1,False,False,,20,20,"
        (define (domain miconic)
            (:requirements :strips :typing)
            (:types passenger
floor)
            (:predicates (lift-at ?f - floor)
(above ?f1 - floor ?f2 - floor)
(destin ?p - passenger ?f - floor)
(not-boarded ?p - passenger)
(not-served ?p - passenger)
(served ?p - passenger)
(origin ?p - passenger ?f - floor)
(in-lift ?p - passenger))

            (:action descend
    :parameters (?from - floor ?to - floor)
    :precondition (and (lift-at ?from) (above ?from ?to))
    :effect (and (not (lift-at ?from)) (lift-at ?to)))
(:action board-passenger
    :parameters (?p - passenger ?f - floor)
    :precondition (and (lift-at ?f) (origin ?p ?f) (not-boarded ?p))
    :effect (and (not (not-boarded ?p)) (in-lift ?p)))
(:action depart-passenger
    :parameters (?p - passenger ?f - floor)
    :precondition (and (in-lift ?p) (lift-at ?f) (destin ?p ?f) (not-served ?p))
    :effect (and (not (in-lift ?p)) (not (not-served ?p)) (served ?p)))
(:action ascend
    :parameters (?from - floor ?to - floor)
    :precondition (and (lift-at ?from) (above ?to ?from))
    :effect (and (not (lift-at ?from)) (lift-at ?to)))
(:action descend
    :parameters (?from - floor ?to - floor)
    :precondition (and (lift-at ?from) (above ?from ?to))
    :effect (and (not (lift-at ?from)) (lift-at ?to)))
        )
    "
2025-07-18_03-51-51,data/domains/miconic,openai,o4-mini,True,detailed-first,validate,8,False,False,,20,20,"(define (domain miconic)
  (:requirements :strips :typing)
  (:types passenger floor)

  (:constants
    p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 - passenger
    f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11 - floor
  )

  (:predicates
    (lift-at    ?f - floor)
    (above      ?f1 - floor ?f2 - floor)
    (origin     ?p - passenger ?f - floor)
    (destin     ?p - passenger ?f - floor)
    (not-boarded ?p - passenger)
    (in-elevator ?p - passenger)
    (not-served  ?p - passenger)
    (served      ?p - passenger)
  )

  (:action up
    :parameters (?from ?to - floor)
    :precondition (and (lift-at ?from) (above ?to ?from))
    :effect (and (not (lift-at ?from)) (lift-at ?to))
  )

  (:action down
    :parameters (?from ?to - floor)
    :precondition (and (lift-at ?from) (above ?from ?to))
    :effect (and (not (lift-at ?from)) (lift-at ?to))
  )

  (:action board
    :parameters (?p - passenger ?f - floor)
    :precondition (and (lift-at ?f) (origin ?p ?f) (not-boarded ?p))
    :effect (and (not (not-boarded ?p)) (in-elevator ?p))
  )

  (:action depart
    :parameters (?p - passenger ?f - floor)
    :precondition (and (lift-at ?f) (in-elevator ?p) (destin ?p ?f) (not-served ?p))
    :effect (and (not (in-elevator ?p)) (served ?p) (not (not-served ?p)))
  )
)"
2025-07-18_03-51-51,data/domains/miconic,openai,o4-mini,True,detailed-first,landmark-val,1,False,False,,18,20,"
        (define (domain miconic)
            (:requirements :strips :typing)
            (:types passenger
floor)
            (:predicates (lift-at ?f - floor)
(above ?f1 - floor ?f2 - floor)
(destin ?p - passenger ?f - floor)
(origin ?p - passenger ?f - floor)
(not-boarded ?p - passenger)
(boarded ?p - passenger)
(not-served ?p - passenger)
(served ?p - passenger))

            (:action move-up
    :parameters (?from ?to - floor)
    :precondition (and (lift-at ?from) (above ?to ?from))
    :effect (and (not (lift-at ?from)) (lift-at ?to))
)
(:action board
  :parameters (?p - passenger ?f - floor)
  :precondition (and (lift-at ?f) (origin ?p ?f) (not-boarded ?p) (not-served ?p))
  :effect (and (not (not-boarded ?p)) (boarded ?p))
)
(:action alight
  :parameters (?p - passenger ?f - floor)
  :precondition (and (lift-at ?f) (destin ?p ?f) (boarded ?p) (not-served ?p))
  :effect (and (not (boarded ?p)) (not (not-served ?p)) (served ?p))
)
(:action move-up :parameters (?from ?to - floor) :precondition (and (lift-at ?from) (above ?to ?from)) :effect (and (not (lift-at ?from)) (lift-at ?to)))
(:action move-down
  :parameters (?from ?to - floor)
  :precondition (and (lift-at ?from) (above ?from ?to))
  :effect (and (not (lift-at ?from)) (lift-at ?to))
)
        )
    "
2025-07-18_03-51-51,data/domains/bookseller,openai,o4-mini,True,first,validate,1,False,False,,18,18,"
        (define (domain bookseller)
            (:requirements :strips :typing)
            (:types book
location
drone)
            (:predicates (drone-at ?d - drone ?l - location)
(empty ?d - drone)
(path ?l1 - location ?l2 - location)
(book-at ?b - book ?l - location)
(carrying ?d - drone ?b - book)
(first ?b - book ?l - location)
(bottom ?b - book ?l - location)
(loaded ?d - drone ?b - book)
(bottomStack ?d - drone ?b - book))

            (:action load-book
    :parameters (?b - book ?d - drone ?l - location)
    :precondition (and
        (drone-at ?d ?l)
        (book-at ?b ?l)
        (empty ?d)
    )
    :effect (and
        (not (book-at ?b ?l))
        (not (empty ?d))
        (carrying ?d ?b)
    )
)
(:action pick-first-book
    :parameters (?d - drone ?b - book ?l - location)
    :precondition (and
        (drone-at ?d ?l)
        (empty ?d)
        (book-at ?b ?l)
        (first ?b ?l)
    )
    :effect (and
        (not (empty ?d))
        (not (book-at ?b ?l))
        (carrying ?d ?b)
    )
)
(:action pick-bottom-book
    :parameters (?d - drone ?b - book ?l - location)
    :precondition (and
        (drone-at ?d ?l)
        (empty ?d)
        (book-at ?b ?l)
        (bottom ?b ?l)
    )
    :effect (and
        (not (book-at ?b ?l))
        (not (empty ?d))
        (carrying ?d ?b)
        (not (bottom ?b ?l))
    )
)
(:action drop-off
    :parameters (?d - drone ?b - book ?l - location)
    :precondition (and
        (drone-at ?d ?l)
        (carrying ?d ?b)
    )
    :effect (and
        (not (carrying ?d ?b))
        (empty ?d)
        (book-at ?b ?l)
        (first ?b ?l)
        (bottom ?b ?l)
    )
)
(:action drop-bottom-book
    :parameters (?d - drone ?b - book ?l - location)
    :precondition (and
        (drone-at ?d ?l)
        (loaded ?d ?b)
        (bottomStack ?d ?b)
    )
    :effect (and
        (not (loaded ?d ?b))
        (not (bottomStack ?d ?b))
        (book-at ?b ?l)
    )
)
(:action fly
    :parameters (?d - drone ?from - location ?to - location)
    :precondition (and
        (drone-at ?d ?from)
        (path ?from ?to)
    )
    :effect (and
        (not (drone-at ?d ?from))
        (drone-at ?d ?to)
    )
)
        )
    "
2025-07-18_03-51-51,data/domains/bookseller,openai,o4-mini,True,first,landmark-val,0,False,False,,0,0,
2025-07-18_03-51-51,data/domains/bookseller,openai,o4-mini,True,detailed-first,validate,10,True,False,,15,18,"(define (domain bookseller)
  (:requirements :strips :typing)
  (:types book location drone)

  (:predicates
    (drone-at ?d - drone ?loc - location)
    (empty ?d - drone)
    (book-at ?b - book ?loc - location)
    (path ?from - location ?to - location)
    (loaded ?d - drone ?b - book)
  )

  (:action loadfirst
    :parameters (?d - drone ?b - book ?loc - location)
    :precondition (and
      (drone-at ?d ?loc)
      (empty    ?d)
      (book-at  ?b ?loc)
    )
    :effect (and
      (not (empty    ?d))
      (not (book-at  ?b ?loc))
      (loaded   ?d ?b)
    )
  )

  (:action unloadfinal
    :parameters (?d - drone ?b - book ?loc - location)
    :precondition (and
      (drone-at ?d ?loc)
      (loaded   ?d ?b)
    )
    :effect (and
      (empty    ?d)
      (book-at  ?b ?loc)
      (not (loaded ?d ?b))
    )
  )

  (:action flydrone
    :parameters (?d - drone ?from - location ?to - location)
    :precondition (and
      (drone-at ?d ?from)
      (path     ?from ?to)
    )
    :effect (and
      (not (drone-at ?d ?from))
      (drone-at     ?d ?to)
    )
  )
)"
2025-07-18_03-51-51,data/domains/bookseller,openai,o4-mini,True,detailed-first,landmark-val,1,False,False,,15,18,"
        (define (domain bookseller)
            (:requirements :strips :typing)
            (:types book
location
drone)
            (:predicates (drone-at ?d - drone ?l - location)
(empty ?d - drone)
(path ?from - location ?to - location)
(book-at ?b - book ?l - location)
(in-drone ?b - book ?d - drone)
(bottom ?b - book ?d - drone)
(top ?b - book ?d - drone)
(ontop ?above - book ?below - book ?d - drone))

            (:action load-book
 :parameters (?d - drone ?b - book ?l - location)
 :precondition (and (drone-at ?d ?l)
                    (book-at ?b ?l)
                    (empty ?d))
 :effect (and (not (book-at ?b ?l))
              (not (empty ?d))
              (in-drone ?b ?d)
              (bottom ?b ?d)))
(:action loadFirst
 :parameters (?d - drone ?b - book ?l - location)
 :precondition (and (drone-at ?d ?l)
                    (empty ?d)
                    (book-at ?b ?l))
 :effect (and (not (empty ?d))
              (not (book-at ?b ?l))
              (in-drone ?b ?d)
              (bottom ?b ?d)
              (top ?b ?d)))
(:action loadBottom
 :parameters (?d - drone ?b - book ?l - location ?p - book)
 :precondition (and (drone-at ?d ?l)
                    (book-at ?b ?l)
                    (in-drone ?p ?d)
                    (top ?p ?d))
 :effect (and (not (book-at ?b ?l))
              (in-drone ?b ?d)
              (not (top ?p ?d))
              (ontop ?p ?b ?d)
              (top ?b ?d)))
(:action unloadFinal
 :parameters (?d - drone ?b - book ?l - location)
 :precondition (and (drone-at ?d ?l)
                    (in-drone ?b ?d)
                    (bottom ?b ?d)
                    (top ?b ?d))
 :effect (and (empty ?d)
              (book-at ?b ?l)
              (not (in-drone ?b ?d))
              (not (bottom ?b ?d))
              (not (top ?b ?d)))
)
(:action unloadBottom
 :parameters (?d - drone ?b - book ?l - location ?p - book)
 :precondition (and (drone-at ?d ?l)
                    (in-drone ?b ?d)
                    (top ?b ?d)
                    (ontop ?p ?b ?d))
 :effect (and (not (in-drone ?b ?d))
              (book-at ?b ?l)
              (not (top ?b ?d))
              (not (ontop ?p ?b ?d))
              (top ?p ?d)))
(:action flyDrone
 :parameters (?d - drone ?from - location ?to - location)
 :precondition (and (drone-at ?d ?from)
                    (path ?from ?to))
 :effect (and (not (drone-at ?d ?from))
              (drone-at ?d ?to)))
        )
    "
2025-07-18_03-51-51,data/domains/checkers-jumping,openai,o4-mini,True,first,validate,1,False,False,,20,20,"
        (define (domain checkers-jumping)
            (:requirements :strips :typing)
            (:types checker
space)
            (:predicates (is-blue ?c - checker)
(is-red ?c - checker)
(at ?c - checker ?s - space)
(empty ?s - space)
(right-of ?s1 - space ?s2 - space)
(left-of ?s1 - space ?s2 - space)
(adjacent ?s1 - space ?s2 - space))

            (:action move-right
  :parameters (?c - checker ?from - space ?to - space)
  :precondition (and (at ?c ?from)
                     (right-of ?from ?to)
                     (empty ?to))
  :effect (and (not (at ?c ?from))
               (at ?c ?to)
               (empty ?from)
               (not (empty ?to))))
(:action move-red
  :parameters (?c - checker ?from - space ?to - space)
  :precondition (and (is-red ?c)
                     (at ?c ?from)
                     (empty ?to)
                     (adjacent ?from ?to))
  :effect (and (not (at ?c ?from))
               (at ?c ?to)
               (empty ?from)
               (not (empty ?to))))
(:action move-blue
  :parameters (?c - checker ?from - space ?to - space)
  :precondition (and (is-blue ?c)
                     (at ?c ?from)
                     (empty ?to)
                     (adjacent ?from ?to))
  :effect (and (not (at ?c ?from))
               (at ?c ?to)
               (empty ?from)
               (not (empty ?to))))
(:action jump-over
  :parameters (?c - checker ?from - space ?overChecker - checker ?over - space ?to - space)
  :precondition (and
                   (at ?c ?from)
                   (at ?overChecker ?over)
                   (empty ?to)
                   (adjacent ?from ?over)
                   (adjacent ?over ?to))
  :effect (and
             (not (at ?c ?from))
             (at ?c ?to)
             (empty ?from)
             (not (empty ?to))
             (not (at ?overChecker ?over))
             (empty ?over)))
(:action jump-over
  :parameters (?c - checker ?from - space ?overChecker - checker ?over - space ?to - space)
  :precondition (and
                  (at ?c ?from)
                  (at ?overChecker ?over)
                  (empty ?to)
                  (adjacent ?from ?over)
                  (adjacent ?over ?to))
  :effect (and
             (not (at ?c ?from))
             (at ?c ?to)
             (empty ?from)
             (not (empty ?to))
             (not (at ?overChecker ?over))
             (empty ?over)))
        )
    "
2025-07-18_03-51-51,data/domains/checkers-jumping,openai,o4-mini,True,first,landmark-val,1,False,False,,0,20,"
        (define (domain checkers-jumping)
            (:requirements :strips :typing)
            (:types checker
space)
            (:predicates (is-blue ?c - checker)
(at ?c - checker ?s - space)
(right-of ?s1 - space ?s2 - space)
(left-of ?s1 - space ?s2 - space)
(is-red ?c - checker)
(empty ?s - space)
(adjacent ?s1 - space ?s2 - space))

            (:action move-right
    :parameters (?c - checker ?from - space ?to - space)
    :precondition (and (at ?c ?from)
                       (right-of ?to ?from)
                       (empty ?to))
    :effect (and (not (at ?c ?from))
                 (at ?c ?to)
                 (not (empty ?to))
                 (empty ?from)))
(:action move-red
    :parameters (?c - checker ?from - space ?to - space)
    :precondition (and (is-red ?c)
                       (at ?c ?from)
                       (empty ?to)
                       (adjacent ?to ?from))
    :effect (and (not (at ?c ?from))
                 (at ?c ?to)
                 (not (empty ?to))
                 (empty ?from)))
(:action move-blue
    :parameters (?c - checker ?from - space ?to - space)
    :precondition (and (is-blue ?c)
                       (at ?c ?from)
                       (empty ?to)
                       (adjacent ?to ?from))
    :effect (and (not (at ?c ?from))
                 (at ?c ?to)
                 (not (empty ?to))
                 (empty ?from)))
(:action jump-over
    :parameters (?c - checker ?other - checker ?from - space ?mid - space ?to - space)
    :precondition (and
        (at ?c ?from)
        (at ?other ?mid)
        (adjacent ?mid ?from)
        (two-away ?from ?to)
        (empty ?to)
    )
    :effect (and
        (not (at ?c ?from))
        (not (at ?other ?mid))
        (at ?c ?to)
        (empty ?from)
        (empty ?mid)
        (not (empty ?to))
    )
)
(:action jump-over
    :parameters (?c - checker ?other - checker ?from - space ?mid - space ?to - space)
    :precondition (and (at ?c ?from)
                       (at ?other ?mid)
                       (adjacent ?mid ?from)
                       (adjacent ?to ?mid)
                       (empty ?to))
    :effect (and (not (at ?c ?from))
                 (not (at ?other ?mid))
                 (at ?c ?to)
                 (empty ?from)
                 (empty ?mid)
                 (not (empty ?to))))
        )
    "
2025-07-18_03-51-51,data/domains/checkers-jumping,openai,o4-mini,True,detailed-first,validate,1,False,False,,20,20,"
        (define (domain checkers-jumping)
            (:requirements :strips :typing)
            (:types checker
space)
            (:predicates (is-blue ?c - checker)
(is-red ?c - checker)
(at ?c - checker ?s - space)
(right-of ?s1 - space ?s2 - space)
(left-of ?s1 - space ?s2 - space)
(empty ?s - space)
(forward-of ?s1 - space ?s2 - space)
(adjacent ?s1 - space ?s2 - space)
(opposite-of ?s1 - space ?s2 - space ?s3 - space))

            (:action move
 :parameters (?c - checker ?from - space ?to - space)
 :precondition (and (at ?c ?from)
                    (empty ?to)
                    (right-of ?from ?to))
 :effect (and (not (at ?c ?from))
              (not (empty ?to))
              (at ?c ?to)
              (empty ?from)))
(:action move-red
 :parameters (?c - checker ?from - space ?to - space)
 :precondition (and (is-red ?c)
                    (at ?c ?from)
                    (empty ?to)
                    (forward-of ?from ?to))
 :effect (and (not (at ?c ?from))
              (not (empty ?to))
              (at ?c ?to)
              (empty ?from)))
(:action move-blue
 :parameters (?c - checker ?from - space ?to - space)
 :precondition (and (is-blue ?c)
                    (at ?c ?from)
                    (empty ?to)
                    (forward-of ?from ?to))
 :effect (and (not (at ?c ?from))
              (not (empty ?to))
              (at ?c ?to)
              (empty ?from)))
(:action jump-over-blue
 :parameters (?c1 - checker ?c2 - checker ?s1 - space ?s2 - space ?s3 - space)
 :precondition (and (is-red ?c1)
                    (at ?c1 ?s1)
                    (is-blue ?c2)
                    (at ?c2 ?s2)
                    (adjacent ?s1 ?s2)
                    (adjacent ?s2 ?s3)
                    (opposite-of ?s1 ?s2 ?s3)
                    (empty ?s3))
 :effect (and (not (at ?c1 ?s1))
              (not (at ?c2 ?s2))
              (at ?c1 ?s3)
              (empty ?s1)
              (empty ?s2)
              (not (empty ?s3))))
(:action jump-over-red
 :parameters (?c1 - checker ?c2 - checker ?s1 - space ?s2 - space ?s3 - space)
 :precondition (and (is-blue ?c1)
                    (at ?c1 ?s1)
                    (is-red ?c2)
                    (at ?c2 ?s2)
                    (adjacent ?s1 ?s2)
                    (adjacent ?s2 ?s3)
                    (opposite-of ?s1 ?s2 ?s3)
                    (empty ?s3))
 :effect (and (not (at ?c1 ?s1))
              (not (at ?c2 ?s2))
              (at ?c1 ?s3)
              (empty ?s1)
              (empty ?s2)
              (not (empty ?s3))))
        )
    "
2025-07-18_03-51-51,data/domains/checkers-jumping,openai,o4-mini,True,detailed-first,landmark-val,1,False,False,,20,20,"
        (define (domain checkers-jumping)
            (:requirements :strips :typing)
            (:types checker
space)
            (:predicates (is-blue ?c - checker)
(is-red ?c - checker)
(at ?c - checker ?s - space)
(right-of ?s1 - space ?s2 - space)
(left-of ?s1 - space ?s2 - space)
(empty ?s - space)
(adjacent ?s1 - space ?s2 - space))

            (:action move
    :parameters (?c - checker ?from - space ?to - space)
    :precondition (and
        (at ?c ?from)
        (empty ?to)
        (adjacent ?from ?to)
    )
    :effect (and
        (not (at ?c ?from))
        (at ?c ?to)
        (not (empty ?to))
        (empty ?from)
    )
)
(:action move-red
  :parameters (?r - checker ?from - space ?to - space)
  :precondition (and
    (is-red ?r)
    (at ?r ?from)
    (empty ?to)
    (right-of ?from ?to)
  )
  :effect (and
    (not (at ?r ?from))
    (at ?r ?to)
    (empty ?from)
    (not (empty ?to))
  )
)
(:action move-blue
  :parameters (?b - checker ?from - space ?to - space)
  :precondition (and
    (is-blue ?b)
    (at ?b ?from)
    (empty ?to)
    (left-of ?from ?to)
  )
  :effect (and
    (not (at ?b ?from))
    (at ?b ?to)
    (empty ?from)
    (not (empty ?to))
  )
)
(:action jump-over-blue
  :parameters (?r - checker ?b - checker ?from - space ?mid - space ?to - space)
  :precondition (and
    (is-red ?r)
    (at ?r ?from)
    (is-blue ?b)
    (at ?b ?mid)
    (empty ?to)
    (right-of ?from ?mid)
    (right-of ?mid ?to)
  )
  :effect (and
    (not (at ?r ?from))
    (at ?r ?to)
    (not (empty ?to))
    (empty ?from)
    (not (at ?b ?mid))
    (empty ?mid)
  )
)
(:action jump-over-red
  :parameters (?b - checker ?r - checker ?from - space ?mid - space ?to - space)
  :precondition (and
    (is-blue ?b)
    (at ?b ?from)
    (is-red ?r)
    (at ?r ?mid)
    (empty ?to)
    (left-of ?from ?mid)
    (left-of ?mid ?to)
  )
  :effect (and
    (not (at ?b ?from))
    (at ?b ?to)
    (not (empty ?to))
    (empty ?from)
    (not (at ?r ?mid))
    (empty ?mid)
  )
)
        )
    "
2025-07-18_03-51-51,data/domains/flow,openai,gpt-4o-mini,True,first,validate,10,True,False,,0,20,"(define (domain flow)
    (:requirements :strips :typing)
    (:types color location)
    (:predicates 
        (flow-complete ?c - color)
        (adjacent ?loc1 - location ?loc2 - location)
        (flow-end ?loc - location)
        (offboard)
        (not-empty ?loc - location)
        (empty ?loc - location)
    )

    (:action draw-path
        :parameters (?c - color ?loc1 ?loc2 - location)
        :precondition (and (flow-end ?loc1) (empty ?loc2) (adjacent ?loc1 ?loc2) (not-empty ?loc2))
        :effect (and (not (empty ?loc2)) (not (flow-end ?loc1)) (not (not-empty ?loc2)))
    )

    (:action begin-flow
        :parameters (?c - color ?loc - location)
        :precondition (and (flow-end ?loc) (not (flow-complete ?c)) (offboard))
        :effect (and (not (offboard)) (flow-complete ?c))
    )

    (:action extend-flow
        :parameters (?c - color ?loc1 ?loc2 - location)
        :precondition (and (not (flow-complete ?c)) (flow-end ?loc1) (adjacent ?loc1 ?loc2) (empty ?loc2))
        :effect (and (not (empty ?loc2)) (not (flow-end ?loc1)))
    )

    (:action complete-flow
        :parameters (?c - color ?loc1 ?loc2 - location)
        :precondition (and (flow-end ?loc1) (flow-end ?loc2) (adjacent ?loc1 ?loc2) (not (flow-complete ?c)))
        :effect (and (flow-complete ?c) (not (flow-end ?loc1)) (not (flow-end ?loc2)))
    )
)"
2025-07-18_03-51-51,data/domains/flow,openai,gpt-4o-mini,True,first,landmark-val,1,False,False,,0,20,"
        (define (domain flow)
            (:requirements :strips :typing)
            (:types color
location)
            (:predicates (flow-complete ?c - color)
(adjacent ?loc1 - location ?loc2 - location)
(flow-end ?loc - location)
(offboard)
(not-empty ?loc - location)
(empty ?loc - location))

            (:action connect-flow :parameters (?c - color ?start ?end - location) :precondition (and (flow-end ?start) (flow-end ?end) (empty ?start) (empty ?end)) :effect (and (not (empty ?start)) (not (empty ?end)) (flow-complete ?c)))
(:action begin-flow :parameters (?c - color ?start - location) :precondition (and (flow-end ?start) (empty ?start) (not (flow-complete ?c))) :effect (and (not (empty ?start)) (not (flow-complete ?c))))
(:action extend-flow :parameters (?c - color ?current - location ?next - location) :precondition (and (not (flow-complete ?c)) (not-empty ?current) (empty ?next) (adjacent ?current ?next)) :effect (and (not (empty ?next)) (not (empty ?current))))
(:action complete-flow :parameters (?c - color ?start - location ?end - location) :precondition (and (flow-end ?start) (flow-end ?end) (not (flow-complete ?c)) (not-empty ?start) (not-empty ?end)) :effect (and (flow-complete ?c) (not (empty ?start)) (not (empty ?end))))
        )
    "
2025-07-18_03-51-51,data/domains/flow,openai,gpt-4o-mini,True,detailed-first,validate,1,False,False,,20,20,"
        (define (domain flow)
            (:requirements :strips :typing)
            (:types color
location)
            (:predicates (flow-complete ?c - color)
(adjacent ?l1 - location ?l2 - location)
(flow-end ?l - location ?c - color)
(offboard)
(not-empty ?l - location)
(empty ?l - location))

            (:action draw-path :parameters (?c - color ?l1 ?l2 - location) :precondition (and (offboard) (flow-end ?l1 ?c) (adjacent ?l1 ?l2) (empty ?l2)) :effect (and (not (offboard)) (not (empty ?l2)) (not (adjacent ?l1 ?l2)) (not (flow-end ?l1 ?c))) )
(:action start-flow :parameters (?c - color ?l - location) :precondition (and (offboard) (flow-end ?l ?c) (empty ?l)) :effect (and (not (offboard)) (not (empty ?l)) (not (flow-end ?l ?c))) )
(:action extend-flow :parameters (?c - color ?l1 ?l2 - location) :precondition (and (not (offboard)) (adjacent ?l1 ?l2) (empty ?l2)) :effect (and (not (empty ?l2)) (not (empty ?l1)) (not (adjacent ?l1 ?l2)) (not (flow-complete ?c)) (flow-complete ?c)) )
(:action complete-flow :parameters (?c - color ?l1 ?l2 - location) :precondition (and (not (offboard)) (adjacent ?l1 ?l2) (flow-end ?l2 ?c) (empty ?l2)) :effect (and (not (empty ?l2)) (flow-complete ?c) (not (flow-end ?l2 ?c)) (not (empty ?l1)) ) )
        )
    "
2025-07-18_03-51-51,data/domains/flow,openai,gpt-4o-mini,True,detailed-first,landmark-val,1,False,False,,20,20,"
        (define (domain flow)
            (:requirements :strips :typing)
            (:types color
location)
            (:predicates (flow-complete ?c - color)
(adjacent ?loc1 - location ?loc2 - location)
(flow-end ?loc - location ?c - color)
(offboard)
(not-empty ?loc - location)
(empty ?loc - location)
(drawing ?loc - location ?c - color)
(mark-color ?loc - location ?c - color))

            (:action draw-flow :parameters (?c - color ?loc1 ?loc2 - location) :precondition (and (flow-end ?loc1 ?c) (flow-end ?loc2 ?c) (offboard) (empty ?loc1) (empty ?loc2) (adjacent ?loc1 ?loc2)) :effect (and (not (empty ?loc1)) (not (empty ?loc2)) (not (offboard)) (flow-complete ?c))
)
(:action start-flow :parameters (?c - color ?loc - location) :precondition (and (flow-end ?loc ?c) (offboard) (empty ?loc)) :effect (and (not (offboard)) (not (empty ?loc)) (drawing ?loc ?c))
)
(:action extend-flow :parameters (?c - color ?current ?next - location) :precondition (and (drawing ?current ?c) (adjacent ?current ?next) (empty ?next)) :effect (and (not (empty ?next)) (not (empty ?current)) (mark-color ?next ?c) (not (drawing ?current ?c)) (drawing ?next ?c))
)
(:action complete-flow :parameters (?c - color ?current ?end - location) :precondition (and (drawing ?current ?c) (flow-end ?end ?c) (adjacent ?current ?end) (empty ?end)) :effect (and (flow-complete ?c) (not (empty ?end)) (mark-color ?end ?c) (not (drawing ?current ?c)) (not (empty ?current)))
)
        )
    "
2025-07-18_03-51-51,data/domains/blocks,openai,gpt-4o-mini,True,first,validate,10,True,False,,11,20,"(define (domain blocks)
    (:requirements :strips :typing)
    (:types block)
    (:predicates (ontable ?x - block)
(clear ?x - block)
(on ?x - block ?y - block)
(handempty)
(holding ?x - block)
(not-clear-below ?x - block))

    (:action unstack :parameters (?x ?y - block) :precondition (and (on ?x ?y) (clear ?x) (handempty)) :effect (and (not (on ?x ?y)) (not (handempty)) (holding ?x) (clear ?y)))

    (:action pick-up :parameters (?x - block) :precondition (and (ontable ?x) (clear ?x) (handempty)) :effect (and (not (ontable ?x)) (holding ?x) (not (handempty)) (not (clear ?x))))

    (:action put-down :parameters (?x - block) :precondition (and (holding ?x)) :effect (and (ontable ?x) (clear ?x) (not (holding ?x)) (handempty) (not (not-clear-below ?x))))

    (:action stack :parameters (?x - block ?y - block) :precondition (and (holding ?x) (clear ?y)) :effect (and (not (holding ?x)) (on ?x ?y) (handempty) (not (clear ?y))))

    (:action pick-up-from-stack :parameters (?x - block ?y - block) :precondition (and (on ?x ?y) (clear ?x) (handempty)) :effect (and (not (on ?x ?y)) (holding ?x) (not (handempty)) (clear ?y)))
)"
2025-07-18_03-51-51,data/domains/blocks,openai,gpt-4o-mini,True,first,landmark-val,1,False,False,,18,20,"
        (define (domain blocks)
            (:requirements :strips :typing)
            (:types block)
            (:predicates (ontable ?x - block)
(clear ?x - block)
(on ?x - block ?y - block)
(handempty)
(holding ?x - block))

            (:action stack :parameters (?x - block ?y - block) :precondition (and (clear ?y) (holding ?x)) :effect (and (not (holding ?x)) (not (clear ?y)) (on ?x ?y) (clear ?x)))
(:action pick-up :parameters (?x - block) :precondition (and (ontable ?x) (clear ?x) (handempty)) :effect (and (not (ontable ?x)) (not (clear ?x)) (holding ?x) (not (handempty))))
(:action put-down :parameters (?x - block) :precondition (holding ?x) :effect (and (ontable ?x) (clear ?x) (not (holding ?x)) (handempty)))
(:action stack :parameters (?x - block ?y - block) :precondition (and (holding ?x) (clear ?y)) :effect (and (not (holding ?x)) (not (clear ?y)) (on ?x ?y) (clear ?x)))
(:action pick-up-from_stack :parameters (?x - block ?y - block) :precondition (and (on ?x ?y) (clear ?x) (handempty)) :effect (and (not (on ?x ?y)) (holding ?x) (not (clear ?x)) (not (handempty))))
        )
    "
2025-07-18_03-51-51,data/domains/blocks,openai,gpt-4o-mini,True,detailed-first,validate,10,True,False,,18,20,"(define (domain blocks)
    (:requirements :strips :typing)
    (:types block)
    (:predicates
        (ontable ?x - block)
        (clear ?x - block)
        (on ?x - block ?y - block)
        (handempty)
        (holding ?x - block)
    )

    (:action stack
        :parameters (?x ?y - block)
        :precondition (and (holding ?x) (clear ?y))
        :effect (and (not (holding ?x)) (not (clear ?y)) (on ?x ?y) (handempty))
    )

    (:action pick-up
        :parameters (?x - block)
        :precondition (and (ontable ?x) (clear ?x) (handempty))
        :effect (and (not (ontable ?x)) (holding ?x) (not (handempty)) (not (clear ?x)))
    )

    (:action put-down
        :parameters (?x - block)
        :precondition (holding ?x)
        :effect (and (ontable ?x) (handempty) (not (holding ?x)) (clear ?x))
    )

    (:action pick-up-stacked
        :parameters (?x ?y - block)
        :precondition (and (on ?x ?y) (clear ?x) (handempty))
        :effect (and (not (on ?x ?y)) (holding ?x) (not (handempty)) (clear ?y))
    )
)"
2025-07-18_03-51-51,data/domains/blocks,openai,gpt-4o-mini,True,detailed-first,landmark-val,1,False,False,,0,20,"
        (define (domain blocks)
            (:requirements :strips :typing)
            (:types block)
            (:predicates (ontable ?x - block)
(clear ?x - block)
(on ?x - block ?y - block)
(handempty)
(holding ?x - block))

            (:action stack :parameters (?x ?y - block) :precondition (and (clear ?y) (holding ?x)) :effect (and (not (holding ?x)) (not (clear ?y)) (on ?x ?y) (handempty)))
(:action pick-up :parameters (?x - block) :precondition (and (ontable ?x) (clear ?x) (handempty)) :effect (and (not (ontable ?x)) (holding ?x) (not (handempty)) (not (clear ?x)))
)
(:action put-down :parameters (?x - block) :precondition (holding ?x) :effect (and (ontable ?x) (handempty) (not (holding ?x)) (clear ?x)))
(:action stack :parameters (?x - block ?y - block) :precondition (and (holding ?x) (clear ?y)) :effect (and (not (holding ?x)) (not (clear ?y)) (on ?x ?y) (handempty)))
(:action lift :parameters (?x - block) :precondition (and (clear ?x) (on ?x ?y) (handempty)) :effect (and (not (clear ?x)) (not (on ?x ?y)) (holding ?x) (not (handempty))))
        )
    "
2025-07-18_03-51-51,data/domains/miconic,openai,gpt-4o-mini,True,first,validate,10,True,False,,18,20,"(define (domain miconic)
    (:requirements :strips :typing)
    (:types passenger floor)
    (:predicates (lift-at ?f - floor)
    (above ?f1 - floor ?f2 - floor)
    (destin ?p - passenger ?f - floor)
    (not-boarded ?p - passenger)
    (not-served ?p - passenger)
    (served ?p - passenger)
    (origin ?p - passenger ?f - floor)
    (next-to ?f1 - floor ?f2 - floor)
    (clear ?f - floor))

    (:action board :parameters (?p - passenger ?f - floor) :precondition (and (lift-at ?f) (not-boarded ?p) (origin ?p ?f) (clear ?f)) :effect (and (not (not-boarded ?p))))

    (:action depart :parameters (?p - passenger ?f - floor) :precondition (and (lift-at ?f) (not-served ?p) (destin ?p ?f)) :effect (and (served ?p) (not (not-served ?p))))

    (:action move-up :parameters (?f1 - floor ?f2 - floor) :precondition (and (lift-at ?f1) (above ?f1 ?f2)) :effect (and (not (lift-at ?f1)) (lift-at ?f2)))

    (:action move-down :parameters (?f1 - floor ?f2 - floor) :precondition (and (lift-at ?f1) (above ?f2 ?f1)) :effect (and (not (lift-at ?f1)) (lift-at ?f2)))
)
"
2025-07-18_03-51-51,data/domains/miconic,openai,gpt-4o-mini,True,first,landmark-val,1,False,False,,18,20,"
        (define (domain miconic)
            (:requirements :strips :typing)
            (:types passenger
floor)
            (:predicates (lift-at ?f - floor)
(above ?f1 - floor ?f2 - floor)
(destin ?p - passenger ?f - floor)
(not-boarded ?p - passenger)
(not-served ?p - passenger)
(served ?p - passenger)
(origin ?p - passenger ?f - floor))

            (:action board :parameters (?p - passenger ?f - floor) :precondition (and (lift-at ?f) (not-boarded ?p)) :effect (and (not (not-boarded ?p)) (origin ?p ?f)))
(:action board :parameters (?p - passenger ?f - floor) :precondition (and (lift-at ?f) (not-boarded ?p) (origin ?p ?f)) :effect (and (not (not-boarded ?p)) (not (origin ?p ?f))))
(:action depart :parameters (?p - passenger ?f - floor) :precondition (and (lift-at ?f) (not-served ?p) (destin ?p ?f)) :effect (and (not (not-served ?p)) (served ?p)))
(:action move-up :parameters (?f1 - floor ?f2 - floor) :precondition (and (lift-at ?f1) (above ?f1 ?f2)) :effect (and (not (lift-at ?f1)) (lift-at ?f2)))
(:action move-down :parameters (?f1 - floor ?f2 - floor) :precondition (and (lift-at ?f1) (above ?f2 ?f1)) :effect (and (not (lift-at ?f1)) (lift-at ?f2)))
        )
    "
2025-07-18_03-51-51,data/domains/miconic,openai,gpt-4o-mini,True,detailed-first,validate,1,False,False,,20,20,"
        (define (domain miconic)
            (:requirements :strips :typing)
            (:types passenger
floor)
            (:predicates (lift-at ?f - floor)
(above ?f1 - floor ?f2 - floor)
(destin ?p - passenger ?f - floor)
(not-boarded ?p - passenger)
(not-served ?p - passenger)
(served ?p - passenger)
(origin ?p - passenger ?f - floor)
(boarded ?p - passenger))

            (:action move-elevator :parameters (?f1 ?f2 - floor) :precondition (and (lift-at ?f1) (above ?f2 ?f1)) :effect (and (not (lift-at ?f1)) (lift-at ?f2)))
(:action board-passenger :parameters (?p - passenger ?f - floor) :precondition (and (lift-at ?f) (not-boarded ?p) (origin ?p ?f)) :effect (and (not (not-boarded ?p)) (boarded ?p) (not (origin ?p ?f))))
(:action drop-off-passenger :parameters (?p - passenger ?f - floor) :precondition (and (lift-at ?f) (boarded ?p) (destin ?p ?f)) :effect (and (not (boarded ?p)) (served ?p) (not (lift-at ?f))))
(:action move-up :parameters (?f1 ?f2 - floor) :precondition (and (lift-at ?f1) (above ?f2 ?f1)) :effect (and (not (lift-at ?f1)) (lift-at ?f2)))
(:action move-down :parameters (?f1 ?f2 - floor) :precondition (and (lift-at ?f1) (above ?f1 ?f2)) :effect (and (not (lift-at ?f1)) (lift-at ?f2)))
        )
    "
2025-07-18_03-51-51,data/domains/miconic,openai,gpt-4o-mini,True,detailed-first,landmark-val,1,False,False,,18,20,"
        (define (domain miconic)
            (:requirements :strips :typing)
            (:types passenger
floor)
            (:predicates (lift-at ?f - floor)
(above ?f1 - floor ?f2 - floor)
(destin ?p - passenger ?f - floor)
(not-boarded ?p - passenger)
(not-served ?p - passenger)
(served ?p - passenger)
(origin ?p - passenger ?f - floor)
(boarded ?p - passenger))

            (:action move :parameters (?f1 ?f2 - floor) :precondition (lift-at ?f1) :effect (and (not (lift-at ?f1)) (lift-at ?f2)))
(:action board :parameters (?p - passenger ?f - floor) :precondition (and (lift-at ?f) (not-boarded ?p) (origin ?p ?f)) :effect (and (not (not-boarded ?p)) (not (origin ?p ?f)) (boarded ?p)))
(:action exit :parameters (?p - passenger ?f - floor) :precondition (and (lift-at ?f) (not-served ?p) (destin ?p ?f)) :effect (and (not (not-served ?p)) (served ?p)))
(:action move-up :parameters (?f1 ?f2 - floor) :precondition (and (lift-at ?f1) (above ?f1 ?f2)) :effect (and (not (lift-at ?f1)) (lift-at ?f2)))
(:action move-down :parameters (?f1 ?f2 - floor) :precondition (and (lift-at ?f1) (above ?f2 ?f1)) :effect (and (not (lift-at ?f1)) (lift-at ?f2)))
        )
    "
2025-07-18_03-51-51,data/domains/bookseller,openai,gpt-4o-mini,True,first,validate,3,False,False,,18,18,"(define (domain bookseller) 
    (:requirements :strips :typing) 
    (:types book 
            location 
            drone) 
    (:predicates (drone-at ?d - drone ?l - location) 
                 (empty ?d - drone) 
                 (path ?l1 - location ?l2 - location) 
                 (book-at ?b - book ?l - location) 
                 (holding ?b - book ?d - drone) 
                 (bottom-book ?b - book ?l - location) 
                 (top-book ?b - book ?l - location)) 

    (:action transport 
              :parameters (?b - book ?d - drone ?l1 - location ?l2 - location) 
              :precondition (and (drone-at ?d ?l1) 
                                (empty ?d) 
                                (book-at ?b ?l2) 
                                (path ?l1 ?l2)) 
              :effect (and (not (book-at ?b ?l2)) 
                           (book-at ?b ?l1) 
                           (not (empty ?d)) 
                           (not (drone-at ?d ?l1)) 
                           (drone-at ?d ?l2))) 

    (:action pick-up 
              :parameters (?b - book ?d - drone ?l - location) 
              :precondition (and (drone-at ?d ?l) 
                                (book-at ?b ?l) 
                                (empty ?d)) 
              :effect (and (not (book-at ?b ?l)) 
                           (not (empty ?d)) 
                           (holding ?b ?d))) 

    (:action pick-bottom-up 
              :parameters (?b - book ?d - drone ?l - location) 
              :precondition (and (drone-at ?d ?l) 
                                (book-at ?b ?l) 
                                (empty ?d) 
                                (bottom-book ?b ?l)) 
              :effect (and (not (book-at ?b ?l)) 
                           (not (empty ?d)) 
                           (holding ?b ?d))) 

    (:action drop-off 
              :parameters (?b - book ?d - drone ?l - location) 
              :precondition (and (drone-at ?d ?l) 
                                (holding ?b ?d) 
                                (top-book ?b ?l) 
                                (not (empty ?d))) 
              :effect (and (book-at ?b ?l) 
                           (empty ?d) 
                           (not (holding ?b ?d)))) 

    (:action drop-bottom 
              :parameters (?b - book ?d - drone ?l - location) 
              :precondition (and (drone-at ?d ?l) 
                                (holding ?b ?d) 
                                (bottom-book ?b ?l) 
                                (not (empty ?d))) 
              :effect (and (book-at ?b ?l) 
                           (empty ?d) 
                           (not (holding ?b ?d)))) 

    (:action fly 
              :parameters (?d - drone ?l1 - location ?l2 - location) 
              :precondition (and (drone-at ?d ?l1) 
                                (path ?l1 ?l2)) 
              :effect (and (not (drone-at ?d ?l1)) 
                           (drone-at ?d ?l2))) 
)"
2025-07-18_03-51-51,data/domains/bookseller,openai,gpt-4o-mini,True,first,landmark-val,1,False,False,,0,18,"
        (define (domain bookseller)
            (:requirements :strips :typing)
            (:types book
location
drone)
            (:predicates (drone-at ?d - drone ?l - location)
(empty ?d - drone)
(path ?l1 - location ?l2 - location)
(book-at ?b - book ?l - location)
(holding ?b - book ?d - drone)
(bottom-book ?b - book ?d - drone))

            (:action transport :parameters (?b - book ?d - drone ?l1 - location ?l2 - location) :precondition (and (drone-at ?d ?l1) (book-at ?b ?l1) (empty ?d) (path ?l1 ?l2)) :effect (and (not (drone-at ?d ?l1)) (drone-at ?d ?l2) (not (book-at ?b ?l1)) (book-at ?b ?l2) (not (empty ?d)) ))
(:action pick-up :parameters (?b - book ?d - drone ?l - location) :precondition (and (drone-at ?d ?l) (book-at ?b ?l) (empty ?d)) :effect (and (not (book-at ?b ?l)) (not (empty ?d)) (holding ?b ?d)))
(:action pick-bottom-book :parameters (?b - book ?d - drone ?l - location) :precondition (and (drone-at ?d ?l) (book-at ?b ?l) (empty ?d) (bottom-book ?b ?l)) :effect (and (not (book-at ?b ?l)) (not (empty ?d)) (holding ?b ?d)))
(:action drop-off :parameters (?b - book ?d - drone ?l - location) :precondition (and (drone-at ?d ?l) (holding ?b ?d)) :effect (and (not (holding ?b ?d)) (book-at ?b ?l) (empty ?d)))
(:action drop-bottom-book :parameters (?b - book ?d - drone ?l - location) :precondition (and (drone-at ?d ?l) (holding ?b ?d) (bottom-book ?b ?d)) :effect (and (not (holding ?b ?d)) (book-at ?b ?l) (empty ?d)))
(:action fly :parameters (?d - drone ?l1 - location ?l2 - location) :precondition (and (drone-at ?d ?l1) (path ?l1 ?l2)) :effect (and (not (drone-at ?d ?l1)) (drone-at ?d ?l2)))
        )
    "
2025-07-18_03-51-51,data/domains/bookseller,openai,gpt-4o-mini,True,detailed-first,validate,1,False,False,,18,18,"
        (define (domain bookseller)
            (:requirements :strips :typing)
            (:types book
location
drone)
            (:predicates (drone-at ?d - drone ?l - location)
(empty ?d - drone)
(path ?from - location ?to - location)
(book-at ?b - book ?l - location)
(stacked ?b - book ?d - drone)
(first-book ?b - book ?d - drone)
(last-book ?b - book ?d - drone)
(ontop ?oldBook - book ?newBook - book))

            (:action pick-up :parameters (?b - book ?d - drone ?l - location) :precondition (and (drone-at ?d ?l) (book-at ?b ?l) (empty ?d)) :effect (and (not (book-at ?b ?l)) (not (empty ?d)) (stacked ?b ?d)))
(:action loadFirst :parameters (?b - book ?d - drone ?l - location) :precondition (and (drone-at ?d ?l) (book-at ?b ?l) (empty ?d)) :effect (and (not (book-at ?b ?l)) (not (empty ?d)) (first-book ?b ?d) (last-book ?b ?d)))
(:action loadBottom :parameters (?newBook - book ?d - drone ?l - location ?oldBook - book) :precondition (and (drone-at ?d ?l) (book-at ?newBook ?l) (not (empty ?d)) (last-book ?oldBook ?d)) :effect (and (not (book-at ?newBook ?l)) (not (last-book ?oldBook ?d)) (ontop ?oldBook ?newBook) (last-book ?newBook ?d)))
(:action unloadFinal :parameters (?d - drone ?b - book ?l - location) :precondition (and (drone-at ?d ?l) (not (empty ?d)) (first-book ?b ?d) (last-book ?b ?d)) :effect (and (book-at ?b ?l) (empty ?d) (not (first-book ?b ?d)) (not (last-book ?b ?d))))
(:action unloadBottom :parameters (?d - drone ?l - location ?b - book ?nextBook - book) :precondition (and (drone-at ?d ?l) (not (empty ?d)) (last-book ?b ?d) (ontop ?b ?nextBook)) :effect (and (book-at ?b ?l) (not (last-book ?b ?d)) (last-book ?nextBook ?d)))
(:action flyDrone :parameters (?d - drone ?from - location ?to - location) :precondition (and (drone-at ?d ?from) (path ?from ?to)) :effect (and (not (drone-at ?d ?from)) (drone-at ?d ?to)))
        )
    "
2025-07-18_03-51-51,data/domains/bookseller,openai,gpt-4o-mini,True,detailed-first,landmark-val,1,False,False,,18,18,"
        (define (domain bookseller)
            (:requirements :strips :typing)
            (:types book
location
drone)
            (:predicates (drone-at ?d - drone ?loc - location)
(empty ?d - drone)
(path ?loc1 - location ?loc2 - location)
(book-at ?b - book ?loc - location)
(carrying ?d - drone ?b - book)
(first-book ?d - drone ?b - book)
(last-book ?d - drone ?b - book)
(ontop ?b1 - book ?b2 - book))

            (:action pick-up :parameters (?b - book ?d - drone ?loc - location) :precondition (and (drone-at ?d ?loc) (book-at ?b ?loc) (empty ?d)) :effect (and (not (empty ?d)) (not (book-at ?b ?loc)) (carrying ?d ?b)))
(:action loadFirst :parameters (?b - book ?d - drone ?loc - location) :precondition (and (drone-at ?d ?loc) (book-at ?b ?loc) (empty ?d)) :effect (and (not (empty ?d)) (not (book-at ?b ?loc)) (carrying ?d ?b) (first-book ?d ?b) (last-book ?d ?b)))
(:action loadBottom :parameters (?newBook - book ?d - drone ?loc - location ?lastBook - book) :precondition (and (drone-at ?d ?loc) (carrying ?d ?lastBook) (book-at ?newBook ?loc)) :effect (and (not (book-at ?newBook ?loc)) (carrying ?d ?newBook) (not (last-book ?d ?lastBook)) (ontop ?lastBook ?newBook) (last-book ?d ?newBook)))
(:action unloadFinal :parameters (?b - book ?d - drone ?loc - location) :precondition (and (drone-at ?d ?loc) (carrying ?d ?b)) :effect (and (empty ?d) (book-at ?b ?loc) (not (first-book ?d ?b)) (not (last-book ?d ?b))))
(:action unloadBottom :parameters (?d - drone ?loc - location ?lastBook - book ?newLastBook - book) :precondition (and (drone-at ?d ?loc) (carrying ?d ?lastBook)) :effect (and (not (carrying ?d ?lastBook)) (book-at ?lastBook ?loc) (not (last-book ?d ?lastBook)) (carrying ?d ?newLastBook) (last-book ?d ?newLastBook)))
(:action flyDrone :parameters (?d - drone ?startLoc - location ?destLoc - location) :precondition (and (drone-at ?d ?startLoc) (path ?startLoc ?destLoc)) :effect (and (not (drone-at ?d ?startLoc)) (drone-at ?d ?destLoc)))
        )
    "
