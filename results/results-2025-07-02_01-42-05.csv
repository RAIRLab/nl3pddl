trial,domain_path,provider,model,give_pred_descriptions,desc_class,hde_runs,hde_timeout,action_timeout,action_timeout_cause,evals_passed,total_evals,domain_raw
2025-07-02_01-42-05,data/domains/flow,openai,o4-mini,True,first,1,False,False,,20,20,"
        (define (domain flow)
            (:requirements :strips :typing)
            (:types color
location)
            (:predicates (flow-end ?loc - location ?c - color)
(empty ?loc - location)
(adjacent ?loc1 - location ?loc2 - location)
(flow-complete ?c - color)
(not-empty ?loc - location)
(offboard)
(finger-at ?loc - location)
(drawing ?c - color)
(colored ?loc - location ?c - color))

            (:action start-flow
 :parameters (?loc - location ?c - color)
 :precondition (and (offboard)
                    (flow-end ?loc ?c)
                    (empty ?loc))
 :effect (and (not (offboard))
              (finger-at ?loc)
              (drawing ?c)
              (not (empty ?loc))
              (not-empty ?loc)))
(:action start-flow
 :parameters (?loc - location ?c - color)
 :precondition (and (offboard)
                    (flow-end ?loc ?c)
                    (empty ?loc))
 :effect (and (not (offboard))
              (finger-at ?loc)
              (drawing ?c)
              (not (empty ?loc))
              (colored ?loc ?c)))
(:action extend-flow
 :parameters (?from - location ?to - location ?c - color)
 :precondition (and (drawing ?c)
                    (finger-at ?from)
                    (adjacent ?from ?to)
                    (empty ?to))
 :effect (and (not (empty ?to))
              (colored ?to ?c)
              (not (finger-at ?from))
              (finger-at ?to)
              (not-empty ?to)))
(:action complete-flow
 :parameters (?from - location ?to - location ?c - color)
 :precondition (and (drawing ?c)
                    (finger-at ?from)
                    (adjacent ?from ?to)
                    (flow-end ?to ?c)
                    (empty ?to))
 :effect (and (not (empty ?to))
              (colored ?to ?c)
              (not-empty ?to)
              (not (drawing ?c))
              (flow-complete ?c)
              (not (finger-at ?from))
              (not (finger-at ?to))
              (offboard)))
        )
    "
2025-07-02_01-42-05,data/domains/flow,openai,o4-mini,True,detailed-first,2,False,False,,20,20,"(define (domain flow)
  (:requirements :strips :typing)
  (:types color location)
  (:predicates
    (flow-end    ?l - location ?c - color)
    (empty       ?l - location)
    (not-empty   ?l - location)
    (adjacent    ?l1 - location ?l2 - location)
    (flow-complete ?c - color)
    (offboard)
    (drawing     ?c - color)
    (flow-tip    ?c - color ?l - location)
    (filled      ?c - color ?l - location)
  )

  (:action start-flow
    :parameters (?l - location ?c - color)
    :precondition (and
        (offboard)
        (flow-end    ?l ?c)
        (empty       ?l)
    )
    :effect (and
        (not (offboard))
        (not (empty ?l))
        (not-empty   ?l)
        (drawing     ?c)
        (flow-tip    ?c ?l)
    )
  )

  (:action extend-flow
    :parameters (?c - color ?from - location ?to - location)
    :precondition (and
        (drawing     ?c)
        (flow-tip    ?c ?from)
        (adjacent    ?from ?to)
        (empty       ?to)
    )
    :effect (and
        (not (empty ?to))
        (not-empty   ?to)
        (filled      ?c ?to)
        (not (flow-tip ?c ?from))
        (flow-tip    ?c ?to)
    )
  )

  (:action complete-flow
    :parameters (?c - color ?from - location ?to - location)
    :precondition (and
        (drawing     ?c)
        (flow-tip    ?c ?from)
        (adjacent    ?from ?to)
        (flow-end    ?to ?c)
        (empty       ?to)
    )
    :effect (and
        (not (drawing     ?c))
        (not (flow-tip    ?c ?from))
        (not (empty       ?to))
        (not-empty       ?to)
        (filled          ?c ?to)
        (flow-complete   ?c)
        (offboard)
    )
  )
)"
2025-07-02_01-42-05,data/domains/blocks,openai,o4-mini,True,first,10,True,False,,12,20,"(define (domain blocks)
  (:requirements :strips :typing)
  (:types block)

  (:predicates
    (handempty)
    (clear ?x - block)
    (on ?x - block ?y - block)
    (ontable ?x - block)
    (holding ?x - block)
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (handempty))
    :effect (and (holding ?x)
                 (not (ontable ?x))
                 (not (clear ?x))
                 (not (handempty)))
  )

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (ontable ?x)
                 (clear ?x)
                 (handempty)
                 (not (holding ?x)))
  )

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (on ?x ?y)
                 (clear ?x)
                 (handempty)
                 (not (holding ?x))
                 (not (clear ?y))
                 (not (ontable ?x)))
  )

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (handempty))
    :effect (and (holding ?x)
                 (clear ?y)
                 (not (on ?x ?y))
                 (not (clear ?x))
                 (not (handempty)))
  )
)"
2025-07-02_01-42-05,data/domains/blocks,openai,o4-mini,True,detailed-first,10,True,False,,12,20,"(define (domain blocks)
  (:requirements :strips :typing)
  (:types block)

  (:predicates
    (handempty)
    (holding ?b - block)
    (clear   ?b - block)
    (on      ?b - block ?x - block)
    (ontable ?b - block)
  )

  ;; Pick up a clear block from the table
  (:action pick-up
    :parameters (?b - block)
    :precondition (and (handempty) (ontable ?b) (clear ?b))
    :effect (and
      (holding ?b)
      (not (handempty))
      (not (ontable ?b))
      (not (clear ?b))
    )
  )

  ;; Unstack a clear block from another block
  (:action unstack
    :parameters (?b - block ?x - block)
    :precondition (and (handempty) (on ?b ?x) (clear ?b))
    :effect (and
      (holding ?b)
      (not (handempty))
      (not (on ?b ?x))
      (not (clear ?b))
      (clear ?x)
      (not (ontable ?b))
    )
  )

  ;; Put down a held block onto the table
  (:action put-down
    :parameters (?b - block)
    :precondition (holding ?b)
    :effect (and
      (ontable ?b)
      (clear ?b)
      (handempty)
      (not (holding ?b))
    )
  )

  ;; Stack a held block onto a clear block
  (:action stack
    :parameters (?b - block ?x - block)
    :precondition (and (holding ?b) (clear ?x))
    :effect (and
      (on ?b ?x)
      (clear ?b)
      (handempty)
      (not (holding ?b))
      (not (clear ?x))
      (not (ontable ?b))
    )
  )
)"
2025-07-02_01-42-05,data/domains/miconic,openai,o4-mini,True,first,10,True,False,,10,20,"(define (domain miconic)
  (:requirements :strips :typing)
  (:types passenger floor)
  (:predicates
    (not-served   ?p - passenger)
    (lift-at      ?f - floor)
    (origin       ?p - passenger ?f - floor)
    (destin       ?p - passenger ?f - floor)
    (served       ?p - passenger)
    (not-boarded  ?p - passenger)
    (in-elevator  ?p - passenger)
    (above        ?f1 - floor ?f2 - floor)
  )

  (:action board
    :parameters (?f - floor  ?p - passenger)
    :precondition (and
      (lift-at      ?f)
      (origin       ?p ?f)
      (not-boarded  ?p)
      (not-served   ?p)
    )
    :effect (and
      (not (not-boarded ?p))
      (in-elevator     ?p)
    )
  )

  (:action depart
    :parameters (?f - floor  ?p - passenger)
    :precondition (and
      (lift-at      ?f)
      (destin       ?p ?f)
      (in-elevator  ?p)
    )
    :effect (and
      (served       ?p)
      (not (in-elevator ?p))
      (not (not-served   ?p))
    )
  )

  (:action up
    :parameters (?f1 - floor  ?f2 - floor)
    :precondition (and
      (lift-at ?f1)
      (above   ?f2 ?f1)
    )
    :effect (and
      (not (lift-at ?f1))
      (lift-at         ?f2)
    )
  )

  (:action down
    :parameters (?f1 - floor  ?f2 - floor)
    :precondition (and
      (lift-at ?f1)
      (above   ?f1 ?f2)
    )
    :effect (and
      (not (lift-at ?f1))
      (lift-at         ?f2)
    )
  )
)"
2025-07-02_01-42-05,data/domains/miconic,openai,o4-mini,True,detailed-first,1,False,False,,20,20,"
        (define (domain miconic)
            (:requirements :strips :typing)
            (:types passenger
floor)
            (:predicates (not-served ?p - passenger)
(lift-at ?f - floor)
(origin ?p - passenger ?f - floor)
(above ?f1 - floor ?f2 - floor)
(served ?p - passenger)
(destin ?p - passenger ?f - floor)
(not-boarded ?p - passenger)
(in-elevator ?p - passenger))

            (:action board-passenger
 :parameters (?p - passenger ?f - floor)
 :precondition (and
    (lift-at ?f)
    (origin ?p ?f)
    (not-boarded ?p)
    (not-served ?p)
 )
 :effect (and
    (in-elevator ?p)
    (not (not-boarded ?p))
    (not (origin ?p ?f))
 ))
(:action board-passenger
  :parameters (?p - passenger ?f - floor)
  :precondition (and
    (lift-at ?f)
    (origin ?p ?f)
    (not-boarded ?p)
    (not-served ?p)
  )
  :effect (and
    (in-elevator ?p)
    (not (origin ?p ?f))
    (not (not-boarded ?p))
  )
)
(:action exit-passenger
  :parameters (?p - passenger ?f - floor)
  :precondition (and
    (in-elevator ?p)
    (destin ?p ?f)
    (lift-at ?f)
    (not-served ?p)
  )
  :effect (and
    (not (in-elevator ?p))
    (served ?p)
    (not (not-served ?p))
  )
)
(:action move-up
  :parameters (?from - floor ?to - floor)
  :precondition (and
    (lift-at ?from)
    (above ?to ?from)
  )
  :effect (and
    (not (lift-at ?from))
    (lift-at ?to)
  )
)
(:action move-down
  :parameters (?from - floor ?to - floor)
  :precondition (and
    (lift-at ?from)
    (above ?from ?to)
  )
  :effect (and
    (not (lift-at ?from))
    (lift-at ?to)
  )
)
        )
    "
2025-07-02_01-42-05,data/domains/bookseller,openai,o4-mini,True,first,1,False,False,,20,20,"
        (define (domain bookseller)
            (:requirements :strips :typing)
            (:types drone
location
book)
            (:predicates (drone-at ?d - drone ?l - location)
(empty ?d - drone)
(path ?from - location ?to - location)
(book-at ?b - book ?l - location)
(loaded ?d - drone ?b - book)
(first ?b - book ?l - location)
(bottom ?b - book ?l - location)
(loc-empty ?l - location))

            (:action load
    :parameters (?d - drone ?b - book ?l - location)
    :precondition (and (drone-at ?d ?l)
                       (book-at ?b ?l)
                       (empty ?d))
    :effect (and (not (book-at ?b ?l))
                 (not (empty ?d))
                 (loaded ?d ?b)))
(:action pickup-first
    :parameters (?d - drone ?b - book ?l - location)
    :precondition (and (drone-at ?d ?l)
                       (empty ?d)
                       (book-at ?b ?l)
                       (first ?b ?l))
    :effect (and (not (book-at ?b ?l))
                 (not (empty ?d))
                 (loaded ?d ?b)
                 (not (first ?b ?l))))
(:action pickup-bottom
    :parameters (?d - drone ?b - book ?l - location)
    :precondition (and (drone-at ?d ?l)
                       (empty ?d)
                       (book-at ?b ?l)
                       (bottom ?b ?l))
    :effect (and (not (book-at ?b ?l))
                 (not (empty ?d))
                 (loaded ?d ?b)
                 (not (bottom ?b ?l))))
(:action drop-off-final
    :parameters (?d - drone ?b - book ?l - location)
    :precondition (and (loaded ?d ?b)
                       (drone-at ?d ?l)
                       (loc-empty ?l))
    :effect (and (not (loaded ?d ?b))
                 (empty ?d)
                 (book-at ?b ?l)
                 (not (loc-empty ?l))
                 (first ?b ?l)
                 (bottom ?b ?l)))
(:action drop-off-bottom
    :parameters (?d - drone ?b - book ?l - location ?ob - book)
    :precondition (and (loaded ?d ?b)
                       (drone-at ?d ?l)
                       (bottom ?ob ?l))
    :effect (and (not (loaded ?d ?b))
                 (empty ?d)
                 (book-at ?b ?l)
                 (not (bottom ?ob ?l))
                 (bottom ?b ?l)))
(:action fly
    :parameters (?d - drone ?from - location ?to - location)
    :precondition (and (drone-at ?d ?from)
                       (path ?from ?to))
    :effect (and (not (drone-at ?d ?from))
                 (drone-at ?d ?to)))
        )
    "
2025-07-02_01-42-05,data/domains/bookseller,openai,o4-mini,True,detailed-first,10,True,False,,12,20,"(define (domain bookseller)
  (:requirements :strips :typing)
  (:types drone location book)

  (:predicates
    (drone-at  ?d - drone   ?l - location)
    (empty     ?d - drone)
    (path      ?from - location ?to - location)
    (book-at   ?b - book    ?l - location)
    (carrying  ?d - drone   ?b - book)
    (first     ?d - drone   ?b - book)
    (last      ?d - drone   ?b - book)
    (ontop     ?b1 - book   ?b2 - book)
  )

  ;; pick up a book from any location into an empty drone
  (:action loadfirst
    :parameters (?d - drone ?b - book ?l - location)
    :precondition (and
      (empty   ?d)
      (book-at ?b ?l)
    )
    :effect (and
      (not (empty     ?d))
      (not (book-at   ?b ?l))
      (carrying    ?d ?b)
      (first       ?d ?b)
      (last        ?d ?b)
      (drone-at    ?d ?l)
    )
  )

  (:action loadbottom
    :parameters (?d - drone ?oldb - book ?newb - book ?l - location)
    :precondition (and
      (last     ?d ?oldb)
      (book-at  ?newb ?l)
    )
    :effect (and
      (not (book-at   ?newb ?l))
      (not (last      ?d ?oldb))
      (ontop        ?oldb ?newb)
      (last         ?d ?newb)
      (carrying     ?d ?newb)
      (drone-at     ?d ?l)
    )
  )

  (:action unloadfinal
    :parameters (?d - drone ?b - book ?l - location)
    :precondition (and
      (drone-at   ?d ?l)
      (carrying   ?d ?b)
      (first      ?d ?b)
      (last       ?d ?b)
    )
    :effect (and
      (empty        ?d)
      (book-at      ?b ?l)
      (not (carrying ?d ?b))
      (not (first    ?d ?b))
      (not (last     ?d ?b))
    )
  )

  (:action unloadbottom
    :parameters (?d - drone ?b - book ?above - book ?l - location)
    :precondition (and
      (drone-at   ?d ?l)
      (carrying   ?d ?b)
      (last       ?d ?b)
      (ontop      ?above ?b)
    )
    :effect (and
      (book-at      ?b ?l)
      (not (carrying ?d ?b))
      (not (last     ?d ?b))
      (not (ontop    ?above ?b))
      (first        ?d ?above)
      (last         ?d ?above)
      (carrying     ?d ?above)
    )
  )

  (:action flydrone
    :parameters (?d - drone ?from - location ?to - location)
    :precondition (and
      (drone-at ?d ?from)
      (path     ?from ?to)
    )
    :effect (and
      (not (drone-at ?d ?from))
      (drone-at     ?d ?to)
    )
  )
)"
2025-07-02_01-42-05,data/domains/checkers-jumping,openai,o4-mini,True,first,1,False,False,,20,20,"
        (define (domain checkers-jumping)
            (:requirements :strips :typing)
            (:types checker
space)
            (:predicates (empty ?s - space)
(is-red ?c - checker)
(is-blue ?c - checker)
(at ?c - checker ?s - space)
(left-of ?s1 - space ?s2 - space)
(right-of ?s1 - space ?s2 - space)
(diagonal-adj ?s1 - space ?s2 - space)
(adjacent ?s1 - space ?s2 - space))

            (:action move-diagonal
 :parameters (?c - checker ?from - space ?to - space)
 :precondition (and (at ?c ?from) (empty ?to) (diagonal-adj ?from ?to))
 :effect (and (not (at ?c ?from)) (at ?c ?to) (not (empty ?to)) (empty ?from)))
(:action move-red
  :parameters (?c - checker ?from - space ?to - space)
  :precondition (and (at ?c ?from)
                     (is-red ?c)
                     (empty ?to)
                     (adjacent ?from ?to))
  :effect (and (not (at ?c ?from))
               (at ?c ?to)
               (empty ?from)
               (not (empty ?to))))
(:action move-blue
 :parameters (?c - checker ?from - space ?to - space)
 :precondition (and (at ?c ?from)
                    (is-blue ?c)
                    (empty ?to)
                    (adjacent ?from ?to))
 :effect (and (not (at ?c ?from))
              (at ?c ?to)
              (empty ?from)
              (not (empty ?to))))
(:action jump
  :parameters (?c - checker ?c2 - checker ?from - space ?over - space ?to - space)
  :precondition (and (at ?c ?from)
                     (at ?c2 ?over)
                     (empty ?to)
                     (diagonal-adj ?from ?over)
                     (diagonal-adj ?over ?to))
  :effect (and (not (at ?c ?from))
               (at ?c ?to)
               (empty ?from)
               (not (empty ?to))
               (not (at ?c2 ?over))
               (empty ?over)))
(:action jump
 :parameters (?c - checker ?oc - checker ?from - space ?over - space ?to - space)
 :precondition (and
    (at ?c ?from)
    (at ?oc ?over)
    (empty ?to)
    (diagonal-adj ?from ?over)
    (diagonal-adj ?over ?to)
 )
 :effect (and
    (not (at ?c ?from))
    (at ?c ?to)
    (empty ?from)
    (not (empty ?to))
    (not (at ?oc ?over))
    (empty ?over)
 )
)
        )
    "
