NON VAR INFO =========================================

TRIAL: 9

Experiment Params ====================================

PROVIDER: openai
MODEL: gpt-5-nano
DOMAIN PATH: data/domains/checkers-jumping
DESC CLASS: detailed-first
FEEDBACK PIPELINE: landmark
GIVE PRED DESCRIPTIONS: True

EXPERIMENT RESULTS ===================================

DOMAIN CHECK RUNS: 3
LANDMARK RUNS: 2
VAL RUNS: 0
HDE ITERATIONS: 6
HDE TIMEOUT: False
ACTION TIMEOUT: False
ACTION TIMEOUT CAUSE: 
EVALS PASSED: 0
TOTAL EVALS: 10
LANGGRAPH PATH:
	call_action_model->
	check_action->
	next_action->
	call_action_model->
	check_action->
	next_action->
	call_action_model->
	check_action->
	next_action->
	call_action_model->
	check_action->
	next_action->
	call_action_model->
	check_action->
	next_action->
	build_domain->
	check_domain_syntax->
	call_domain_model->
	check_domain_syntax->
	feedback->
	call_domain_model->
	check_domain_syntax->
	call_domain_model->
	check_domain_syntax->
	feedback->
	call_domain_model->
	check_domain_syntax->
	call_domain_model->
	check_domain_syntax->
	feedback->
	final_evaluation

FINAL DOMAIN =====================================

(define (domain checkers-jumping)
    (:requirements :strips :typing)
    (:types
        checker space - object
    )
    (:predicates (at ?c - checker ?s - space)  (empty ?s - space)  (is-blue ?c - checker)  (is-red ?c - checker)  (left-of ?s1 - space ?s2 - space)  (right-of ?s1 - space ?s2 - space))
    (:action jump-blue
        :parameters (?c - checker ?mid - checker ?from - space ?adj - space ?to - space)
        :precondition (and (is-blue ?c) (at ?c ?from) (at ?mid ?adj) (is-blue ?mid) (right-of ?from ?adj) (right-of ?adj ?to) (empty ?to))
        :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to)))
    )
     (:action jump-red
        :parameters (?c - checker ?mid - checker ?from - space ?adj - space ?to - space)
        :precondition (and (is-red ?c) (at ?c ?from) (at ?mid ?adj) (is-red ?mid) (right-of ?from ?adj) (right-of ?adj ?to) (empty ?to))
        :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to)))
    )
     (:action slide-blue
        :parameters (?c - checker ?from - space ?to - space)
        :precondition (and (is-blue ?c) (at ?c ?from) (left-of ?from ?to) (empty ?to))
        :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to)))
    )
     (:action slide-red
        :parameters (?c - checker ?from - space ?to - space)
        :precondition (and (is-red ?c) (at ?c ?from) (right-of ?from ?to) (empty ?to))
        :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to)))
    )
)
Messages ===========================================


SYSTEM

You will be given a natural language description of an a Planning Domain Definition Language (PDDL) domain along with a set of types and predicates you are allowed to use. You will then be given a description of each action in the domain, including its parameter count and types. With this, your goal is to generate a PDDL action for this description filling in the preconditions and effects. You are allowed to create new predicates and types as needed but must include the set of all predicates and types you used in the output. For your output please provide a JSON object with the following felids: 
1. A string containing a raw PDDL action 
2. A list of predicates used so far with all parameters and types
3. A list of types used so far, we assume there is no type hierarchy.

The JSON object should be formatted as follows:
{
    "pddl_action": "(:action <action_name> ...)",
    "predicates": ["(pred1 ?param1 - type1 ?param2 - type2)", ...]
    "types" : ["type1", "type2", ...]
}

If you mess up the formatting or output invalid PDDL, you will receive a message instructing you on what is wrong and how you may fix it, at which point you should try to generate the PDDL action again, you will be requested to fix the issue until you generate a valid PDDL action. Ensure the generated domain is fully lowercase and that all parentheses are balanced.

Do not refuse to answer and do not ask any questions to the user, since the user is an automated tool that can not respond as a human would. If you are unsure about something, make a reasonable assumption and proceed.

Do not ask the user for any more information or clarifications, you must work with the information provided. If you are unsure about something, make a reasonable assumption and proceed.


HUMAN

The following is a natural language description of a PDDL domain:

The domain assumes a world where there are a set of blocks that can be stacked on top of each other, an arm that can hold one block at a time, and a table where blocks can be placed.

To start you may use the following predicates but are free to add more:

["(handempty) : nothing is being held by the arm", "(on ?x - block ?y - block) : block ?x is ontop of block ?y", "(ontable ?x - block) : the given block is on the table", "(clear ?x - block) : The given block has nothing ontop of it", "(holding ?x - block) : The arm is holding the given block"]

You may also use the following types:

["block"]


HUMAN

Using the current list of predicates and any new predicates you feel you need,generate a description of the following action in the above described domain. 

The pick-up action represents the action of a robot arm picking up a single block from the table

Regardless of whether you create any new predicates, include the set of all predicates used so far in the output.


AI

{ 
    "pddl_action": "(:action pick-up :parameters (?x - block) :precondition (and (ontable ?x) (clear ?x) (handempty)) :effect (and (not (ontable ?x)) (holding ?x) (not (handempty)) (not (clear ?x)))\n)",
    "predicates": ["(handempty)", "(on ?x - block ?y - block)", "(ontable ?x - block)", "(clear ?x - block)", "(holding ?x - block)"],
    "types": ["block"]
}


HUMAN

Using the current list of predicates and any new predicates you feel you need, generate a description of the following action in the above described domain. 

The Stack action represents the action of stacking a block on top of another block. 

Regardless of whether you create any new predicates, include the set of all predicates used so far in the output.


AI

{
    "pddl_action": "(:action stack :parameters (?x ?y - block) :precondition (and (clear ?y) (on ?x) (handempty)) :effect (and (not (on ?x)) (not (handempty)) (stacked ?x ?y) (not (clear ?y)))\n)",
    "predicates": [(handempty)", "(on ?x - block ?y - block)", "(ontable ?x - block)", "(clear ?x - block)", "(holding ?x - block)]
    "types": ["block"]
}


HUMAN

The following is a natural language description of a PDDL domain:



To start you may use the following types but are free to add more:

[checker, space]                                         

To start you may use the following predicates but are free to add more:

[(is-red ?c - checker): Indicates that a specific checker is red, distinguishing it from blue checkers., (empty ?s - space): Specifies that a square on the board does not contain any checker, making it available for movement., (at ?c - checker ?s - space): Indicates that a specific checker (red or blue) occupies a particular square on the board., (right-of ?s1 - space ?s2 - space): Denotes the relative position of one square being directly to the right of another square on the board., (is-blue ?c - checker): Indicates that a specific checker is blue, distinguishing it from red checkers., (left-of ?s1 - space ?s2 - space): Denotes the relative position of one square being directly to the left of another square on the board.]


AI

{"pddl_action": "(:action stack :parameters (?a - checker ?b - checker ?s - space) :precondition (and (at ?a ?s) (at ?b ?s) (clear ?a) (clear ?b)) :effect (and (not (at ?a ?s)) (on-top ?a ?b) (not (clear ?b)) (clear ?a))\n)", "predicates": ["(is-red ?c - checker)", "(empty ?s - space)", "(at ?c - checker ?s - space)", "(right-of ?s1 - space ?s2 - space)", "(is-blue ?c - checker)", "(left-of ?s1 - space ?s2 - space)", "(clear ?x - checker)", "(on-top ?a - checker ?b - checker)"], "types": ["checker", "space"]}


HUMAN

Using the current list of predicates and any new predicates you feel you need,generate a PDDL action for the following action description in the above described domain: 

This action allows a player to move a red checker to an adjacent square. The square must be empty, meaning no other checker is present. The player can not slide the checker backwards.

Regardless of whether you create any new predicates, include the set of all predicates used so far in the output.


AI

{"pddl_action": "(:action move-red-right :parameters (?c - checker ?from - space ?to - space) :precondition (and (is-red ?c) (at ?c ?from) (right-of ?from ?to) (empty ?to)) :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to))) )", "predicates": ["(is-red ?c - checker)", "(empty ?s - space)", "(at ?c - checker ?s - space)", "(right-of ?s1 - space ?s2 - space)", "(is-blue ?c - checker)", "(left-of ?s1 - space ?s2 - space)", "(clear ?x - checker)", "(on-top ?a - checker ?b - checker)"], "types": ["checker", "space"]}


HUMAN

Using the current list of predicates and any new predicates you feel you need,generate a PDDL action for the following action description in the above described domain: 

This action allows a player to move a blue checker to an adjacent square. The square must be empty, meaning no other checker is present. The player can not slide the checker backwards.

Regardless of whether you create any new predicates, include the set of all predicates used so far in the output.


AI

{"pddl_action": "(:action move-blue-right :parameters (?c - checker ?from - space ?to - space) :precondition (and (is-blue ?c) (at ?c ?from) (right-of ?from ?to) (empty ?to)) :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to))) )", "predicates": ["(is-red ?c - checker)", "(empty ?s - space)", "(at ?c - checker ?s - space)", "(right-of ?s1 - space ?s2 - space)", "(is-blue ?c - checker)", "(left-of ?s1 - space ?s2 - space)", "(clear ?x - checker)", "(on-top ?a - checker ?b - checker)"], "types": ["checker", "space"]}


HUMAN

Using the current list of predicates and any new predicates you feel you need,generate a PDDL action for the following action description in the above described domain: 

This action allows a player to jump over an adjacent blue checker to land on an empty square directly on the opposite side of the jumped checker.

Regardless of whether you create any new predicates, include the set of all predicates used so far in the output.


AI

{"pddl_action": "(:action jump-blue-over-right :parameters (?c - checker ?mid - checker ?from - space ?adj - space ?to - space) :precondition (and (is-blue ?c) (at ?c ?from) (at ?mid ?adj) (is-blue ?mid) (right-of ?from ?adj) (right-of ?adj ?to) (empty ?to)) :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to))) )", "predicates": ["(is-red ?c - checker)", "(empty ?s - space)", "(at ?c - checker ?s - space)", "(right-of ?s1 - space ?s2 - space)", "(is-blue ?c - checker)", "(left-of ?s1 - space ?s2 - space)", "(clear ?x - checker)", "(on-top ?a - checker ?b - checker)", "(at ?mid - checker ?adj - space)", "(is-blue ?mid - checker)", "(empty ?to - space)", "(at ?c - checker ?from - space)", "(right-of ?from - space ?adj - space)", "(right-of ?adj - space ?to - space)"], "types": ["checker", "space"]}


HUMAN

Using the current list of predicates and any new predicates you feel you need,generate a PDDL action for the following action description in the above described domain: 

This action allows a player to jump over an adjacent red checker to land on an empty square directly on the opposite side of the jumped checker.

Regardless of whether you create any new predicates, include the set of all predicates used so far in the output.


AI

{"pddl_action": "(:action jump-red-over-right :parameters (?c - checker ?mid - checker ?from - space ?adj - space ?to - space) :precondition (and (is-red ?c) (at ?c ?from) (at ?mid ?adj) (is-red ?mid) (right-of ?from ?adj) (right-of ?adj ?to) (empty ?to)) :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to))))", "predicates": ["(is-red ?c - checker)", "(empty ?s - space)", "(at ?c - checker ?s - space)", "(right-of ?s1 - space ?s2 - space)", "(is-blue ?c - checker)", "(left-of ?s1 - space ?s2 - space)", "(clear ?x - checker)", "(on-top ?a - checker ?b - checker)"], "types": ["checker", "space"]}


HUMAN

Based on the actions you have given, the full domain is as follows:


        (define (domain checkers-jumping)
            (:requirements :strips :typing)
            (:types checker
space)
            (:predicates (is-red ?c - checker)
(empty ?s - space)
(at ?c - checker ?s - space)
(right-of ?s1 - space ?s2 - space)
(is-blue ?c - checker)
(left-of ?s1 - space ?s2 - space)
(clear ?x - checker)
(on-top ?a - checker ?b - checker))

            (:action stack :parameters (?a - checker ?b - checker ?s - space) :precondition (and (at ?a ?s) (at ?b ?s) (clear ?a) (clear ?b)) :effect (and (not (at ?a ?s)) (on-top ?a ?b) (not (clear ?b)) (clear ?a))
)
(:action move-red-right :parameters (?c - checker ?from - space ?to - space) :precondition (and (is-red ?c) (at ?c ?from) (right-of ?from ?to) (empty ?to)) :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to))) )
(:action move-blue-right :parameters (?c - checker ?from - space ?to - space) :precondition (and (is-blue ?c) (at ?c ?from) (right-of ?from ?to) (empty ?to)) :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to))) )
(:action jump-blue-over-right :parameters (?c - checker ?mid - checker ?from - space ?adj - space ?to - space) :precondition (and (is-blue ?c) (at ?c ?from) (at ?mid ?adj) (is-blue ?mid) (right-of ?from ?adj) (right-of ?adj ?to) (empty ?to)) :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to))) )
(:action jump-red-over-right :parameters (?c - checker ?mid - checker ?from - space ?adj - space ?to - space) :precondition (and (is-red ?c) (at ?c ?from) (at ?mid ?adj) (is-red ?mid) (right-of ?from ?adj) (right-of ?adj ?to) (empty ?to)) :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to))))
        )
    

Now you will receive a list of issues with the domain, one at a time. For each issue, generate a corrected version of the full domain that addresses the issue.


HUMAN

Action names do not match the expected action names. Missing actions: slide-red, jump-blue, slide-blue, jump-red. Extra actions: move-red-right, jump-blue-over-right, move-blue-right, jump-red-over-right, stack.  Please revise the domain and try again.


AI

{"pddl_domain": "(define (domain checkers-jumping)\n  (:requirements :strips :typing)\n  (:types checker space)\n  (:predicates\n    (is-red ?c - checker)\n    (is-blue ?c - checker)\n    (empty ?s - space)\n    (at ?c - checker ?s - space)\n    (right-of ?s1 - space ?s2 - space)\n    (left-of ?s1 - space ?s2 - space)\n    (clear ?x - checker)\n    (on-top ?a - checker ?b - checker)\n  )\n\n  (:action slide-red\n    :parameters (?c - checker ?from - space ?to - space)\n    :precondition (and (is-red ?c) (at ?c ?from) (right-of ?from ?to) (empty ?to))\n    :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to)))\n  )\n\n  (:action slide-blue\n    :parameters (?c - checker ?from - space ?to - space)\n    :precondition (and (is-blue ?c) (at ?c ?from) (right-of ?from ?to) (empty ?to))\n    :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to)))\n  )\n\n  (:action jump-blue\n    :parameters (?c - checker ?mid - checker ?from - space ?adj - space ?to - space)\n    :precondition (and (is-blue ?c) (at ?c ?from) (at ?mid ?adj) (is-blue ?mid) (right-of ?from ?adj) (right-of ?adj ?to) (empty ?to))\n    :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to)))\n  )\n\n  (:action jump-red\n    :parameters (?c - checker ?mid - checker ?from - space ?adj - space ?to - space)\n    :precondition (and (is-red ?c) (at ?c ?from) (at ?mid ?adj) (is-red ?mid) (right-of ?from ?adj) (right-of ?adj ?to) (empty ?to))\n    :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to)))\n  )\n)\n"}


HUMAN

Given the above domain you just generated, attempting to use it with the following problem:
```
(define (problem checkers-jumping-prob-2)
  (:domain checkers-jumping)

  (:objects
    space1 space2 space3 space4 space5 - space
    red1 red2 blue1 blue2 - checker
  )

  (:init
    (at red1 space1)
    (at red2 space2)
    (empty space3)
    (at blue1 space4)
    (at blue2 space5)

    (right-of space1 space2)
    (right-of space2 space3)
    (right-of space3 space4)
    (right-of space4 space5)
    (left-of space2 space1)
    (left-of space3 space2)
    (left-of space4 space3)
    (left-of space5 space4)

    (is-red red1)
    (is-red red2)
    (is-blue blue1)
    (is-blue blue2)
  )

  (:goal (and
    (at blue1 space1)
    (at blue2 space2)
    (empty space3)
    (at red1 space4)
    (at red2 space5)
  ))
)

```
It was found to be unsolvable, but it was expected that the domain should be solvable on this problem. This is an indication that a precondition or effect of an action in the domain are missing.

Please revise the previous domain to fix the issue. You may create new predicates and types if needed, but make sure to update the predicate and type lists accordingly. You may not add new requirements to the domain, your output should exclusively be a typed STRIPS domain.


AI

{"pddl_domain": "(define (domain checkers-jumping)\n  (:requirements :strips :typing)\n  (:types checker space)\n  (:predicates\n    (is-red ?c - checker)\n    (is-blue ?c - checker)\n    (empty ?s - space)\n    (at ?c - checker ?s - space)\n    (right-of ?s1 - space ?s2 - space)\n    (left-of ?s1 - space ?s2 - space)\n    (clear ?x - checker)\n    (on-top ?a - checker ?b - checker)\n  )\n\n  (:action slide-red\n    :parameters (?c - checker ?from - space ?to - space)\n    :precondition (and (is-red ?c) (at ?c ?from) (left-of ?from ?to) (empty ?to))\n    :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to)))\n  )\n\n  (:action slide-blue\n    :parameters (?c - checker ?from - space ?to - space)\n    :precondition (and (is-blue ?c) (at ?c ?from) (left-of ?from ?to) (empty ?to))\n    :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to)))\n  )\n\n  (:action jump-blue\n    :parameters (?c - checker ?mid - checker ?from - space ?adj - space ?to - space)\n    :precondition (and (is-blue ?c) (at ?c ?from) (at ?mid ?adj) (is-blue ?mid) (right-of ?from ?adj) (right-of ?adj ?to) (empty ?to))\n    :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to)))\n  )\n\n  (:action jump-red\n    :parameters (?c - checker ?mid - checker ?from - space ?adj - space ?to - space)\n    :precondition (and (is-red ?c) (at ?c ?from) (at ?mid ?adj) (is-red ?mid) (right-of ?from ?adj) (right-of ?adj ?to) (empty ?to))\n    :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to)))\n  )\n\n  (:action slide-red-left\n    :parameters (?c - checker ?from - space ?to - space)\n    :precondition (and (is-red ?c) (at ?c ?from) (left-of ?from ?to) (empty ?to))\n    :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to)))\n  )\n\n  (:action slide-blue-left\n    :parameters (?c - checker ?from - space ?to - space)\n    :precondition (and (is-blue ?c) (at ?c ?from) (left-of ?from ?to) (empty ?to))\n    :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to)))\n  )\n\n  (:action jump-blue-over-left\n    :parameters (?c - checker ?mid - checker ?from - space ?adj - space ?to - space)\n    :precondition (and (is-blue ?c) (at ?c ?from) (at ?mid ?adj) (is-blue ?mid) (left-of ?from ?adj) (left-of ?adj ?to) (empty ?to))\n    :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to)))\n  )\n\n  (:action jump-red-over-left\n    :parameters (?c - checker ?mid - checker ?from - space ?adj - space ?to - space)\n    :precondition (and (is-red ?c) (at ?c ?from) (at ?mid ?adj) (is-red ?mid) (left-of ?from ?adj) (left-of ?adj ?to) (empty ?to))\n    :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to)))\n  )\n)\n"}


HUMAN

Action names do not match the expected action names. Extra actions: slide-red-left, jump-red-over-left, slide-blue-left, jump-blue-over-left.  Please revise the domain and try again.


AI

{"pddl_domain": "(define (domain checkers-jumping)\n  (:requirements :strips :typing)\n  (:types checker space)\n  (:predicates\n    (is-red ?c - checker)\n    (is-blue ?c - checker)\n    (empty ?s - space)\n    (at ?c - checker ?s - space)\n    (right-of ?s1 - space ?s2 - space)\n    (left-of ?s1 - space ?s2 - space)\n    (clear ?x - checker)\n    (on-top ?a - checker ?b - checker)\n  )\n\n  (:action slide-red\n    :parameters (?c - checker ?from - space ?to - space)\n    :precondition (and (is-red ?c) (at ?c ?from) (left-of ?from ?to) (empty ?to))\n    :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to)))\n  )\n\n  (:action slide-blue\n    :parameters (?c - checker ?from - space ?to - space)\n    :precondition (and (is-blue ?c) (at ?c ?from) (left-of ?from ?to) (empty ?to))\n    :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to)))\n  )\n\n  (:action jump-blue\n    :parameters (?c - checker ?mid - checker ?from - space ?adj - space ?to - space)\n    :precondition (and (is-blue ?c) (at ?c ?from) (at ?mid ?adj) (is-blue ?mid) (right-of ?from ?adj) (right-of ?adj ?to) (empty ?to))\n    :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to)))\n  )\n\n  (:action jump-red\n    :parameters (?c - checker ?mid - checker ?from - space ?adj - space ?to - space)\n    :precondition (and (is-red ?c) (at ?c ?from) (at ?mid ?adj) (is-red ?mid) (right-of ?from ?adj) (right-of ?adj ?to) (empty ?to))\n    :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to)))\n  )\n)\n"}


HUMAN

Given the above domain you just generated, attempting to use it with the following problem:
```
(define (problem checkers-jumping-prob-2)
  (:domain checkers-jumping)

  (:objects
    space1 space2 space3 space4 space5 - space
    red1 red2 blue1 blue2 - checker
  )

  (:init
    (at red1 space1)
    (at red2 space2)
    (empty space3)
    (at blue1 space4)
    (at blue2 space5)

    (right-of space1 space2)
    (right-of space2 space3)
    (right-of space3 space4)
    (right-of space4 space5)
    (left-of space2 space1)
    (left-of space3 space2)
    (left-of space4 space3)
    (left-of space5 space4)

    (is-red red1)
    (is-red red2)
    (is-blue blue1)
    (is-blue blue2)
  )

  (:goal (and
    (at blue1 space1)
    (at blue2 space2)
    (empty space3)
    (at red1 space4)
    (at red2 space5)
  ))
)

```
It was found to be unsolvable, but it was expected that the domain should be solvable on this problem. This is an indication that a precondition or effect of an action in the domain are missing.

Please revise the previous domain to fix the issue. You may create new predicates and types if needed, but make sure to update the predicate and type lists accordingly. You may not add new requirements to the domain, your output should exclusively be a typed STRIPS domain.


AI

{"pddl_domain": "(define (domain checkers-jumping)\n  (:requirements :strips :typing)\n  (:types checker space)\n  (:predicates\n    (is-red ?c - checker)\n    (is-blue ?c - checker)\n    (empty ?s - space)\n    (at ?c - checker ?s - space)\n    (right-of ?s1 - space ?s2 - space)\n    (left-of ?s1 - space ?s2 - space)\n  )\n\n  (:action slide-red-right\n    :parameters (?c - checker ?from - space ?to - space)\n    :precondition (and (is-red ?c) (at ?c ?from) (right-of ?from ?to) (empty ?to))\n    :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to)))\n  )\n\n  (:action slide-red-left\n    :parameters (?c - checker ?from - space ?to - space)\n    :precondition (and (is-red ?c) (at ?c ?from) (left-of ?from ?to) (empty ?to))\n    :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to)))\n  )\n\n  (:action slide-blue-right\n    :parameters (?c - checker ?from - space ?to - space)\n    :precondition (and (is-blue ?c) (at ?c ?from) (right-of ?from ?to) (empty ?to))\n    :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to)))\n  )\n\n  (:action slide-blue-left\n    :parameters (?c - checker ?from - space ?to - space)\n    :precondition (and (is-blue ?c) (at ?c ?from) (left-of ?from ?to) (empty ?to))\n    :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to)))\n  )\n\n  (:action jump-blue-over-right\n    :parameters (?c - checker ?mid - checker ?from - space ?adj - space ?to - space)\n    :precondition (and (is-blue ?c) (at ?c ?from) (at ?mid ?adj) (right-of ?from ?adj) (right-of ?adj ?to) (empty ?to))\n    :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to)))\n  )\n\n  (:action jump-blue-over-left\n    :parameters (?c - checker ?mid - checker ?from - space ?adj - space ?to - space)\n    :precondition (and (is-blue ?c) (at ?c ?from) (at ?mid ?adj) (left-of ?from ?adj) (left-of ?adj ?to) (empty ?to))\n    :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to)))\n  )\n\n  (:action jump-red-over-right\n    :parameters (?c - checker ?mid - checker ?from - space ?adj - space ?to - space)\n    :precondition (and (is-red ?c) (at ?c ?from) (at ?mid ?adj) (right-of ?from ?adj) (right-of ?adj ?to) (empty ?to))\n    :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to)))\n  )\n\n  (:action jump-red-over-left\n    :parameters (?c - checker ?mid - checker ?from - space ?adj - space ?to - space)\n    :precondition (and (is-red ?c) (at ?c ?from) (at ?mid ?adj) (left-of ?from ?adj) (left-of ?adj ?to) (empty ?to))\n    :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to)))\n  )\n)\n"}


HUMAN

Action names do not match the expected action names. Missing actions: slide-red, jump-blue, slide-blue, jump-red. Extra actions: slide-red-left, slide-blue-left, jump-blue-over-right, jump-blue-over-left, slide-red-right, jump-red-over-left, slide-blue-right, jump-red-over-right.  Please revise the domain and try again.


AI

{"pddl_domain": "(define (domain checkers-jumping)\n  (:requirements :strips :typing)\n  (:types checker space)\n  (:predicates\n    (is-red ?c - checker)\n    (is-blue ?c - checker)\n    (empty ?s - space)\n    (at ?c - checker ?s - space)\n    (right-of ?s1 - space ?s2 - space)\n    (left-of ?s1 - space ?s2 - space)\n  )\n\n  (:action slide-red\n    :parameters (?c - checker ?from - space ?to -space)\n    :precondition (and (is-red ?c) (at ?c ?from) (right-of ?from ?to) (empty ?to))\n    :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to)))\n  )\n\n  (:action slide-blue\n    :parameters (?c - checker ?from - space ?to - space)\n    :precondition (and (is-blue ?c) (at ?c ?from) (left-of ?from ?to) (empty ?to))\n    :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to)))\n  )\n\n  (:action jump-blue\n    :parameters (?c - checker ?mid - checker ?from - space ?adj - space ?to - space)\n    :precondition (and (is-blue ?c) (at ?c ?from) (at ?mid ?adj) (is-blue ?mid) (right-of ?from ?adj) (right-of ?adj ?to) (empty ?to))\n    :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to)))\n  )\n\n  (:action jump-red\n    :parameters (?c - checker ?mid - checker ?from - space ?adj - space ?to - space)\n    :precondition (and (is-red ?c) (at ?c ?from) (at ?mid ?adj) (is-red ?mid) (right-of ?from ?adj) (right-of ?adj ?to) (empty ?to))\n    :effect (and (not (at ?c ?from)) (at ?c ?to) (empty ?from) (not (empty ?to)))\n  )\n)\n"}


