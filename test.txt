system

Given a template of a Planning Domain Definition Language (PDDL) planning domain and a natural language description of that domain,
fill in the types and predicates as well as the missing preconditions and effects for each action in the domain using the provided natural language description.

The following restrictions apply to the output:
1) You are only to output PDDL, and nothing else. You are to output the domain as raw text, with no additional formatting.
2) You are to use the provided template as a base, and only fill in the missing preconditions and effects for each action.
3) The output domain should be typed STRIPS, which means that the preconditions should only contain positive literals, do not include any negated preconditions, or quantified preconditions or effects. 

user
The domain assumes a world where there are a set of blocks that can
be stacked on top of each other, an arm that can hold one block at
a time, and a table where blocks can be placed.

(define (domain blocks)

    (:requirements :strips :typing)

    (:types
    )

    (:predicates 
    )

    (:action pick-up
        :parameters (?x - block)
        :precondition ()
        :effect ()
    )

    (:action put-down
        :parameters (?x - block)
        :precondition ()
        :effect ()
    )

    (:action stack
        :parameters (?x - block ?y - block)
        :precondition ()
        :effect ()
    )

    (:action unstack
        :parameters (?x - block ?y - block)
        :precondition ()
        :effect ()
    )
)
assistant

(define (domain blocks)

    (:requirements :strips :typing)

    (:types block)

    (:predicates 
        (on ?x - block ?y - block)
        (ontable ?x - block)
        (clear ?x - block)
        (handempty)
        (holding ?x - block)
    )

    (:action pick-up
        :parameters (?x - block)
        :precondition (and (clear ?x) (ontable ?x) (handempty))
        :effect (and (not (ontable ?x)) (not (clear ?x)) (not (handempty)) (holding ?x))
    )

    (:action put-down
        :parameters (?x - block)
        :precondition (holding ?x)
        :effect (and (not (holding ?x)) (clear ?x) (handempty) (ontable ?x))
    )

    (:action stack
        :parameters (?x - block ?y - block)
        :precondition (and (holding ?x) (clear ?y))
        :effect (and (not (holding ?x)) (not (clear ?y)) (clear ?x) (handempty) (on ?x ?y))
    )

    (:action unstack
        :parameters (?x - block ?y - block)
        :precondition (and (on ?x ?y) (clear ?x) (handempty))
        :effect (and (holding ?x) (clear ?y) (not (clear ?x)) (not (handempty)) (not (on ?x ?y)))
    )
)
user
The domain assumes a world where there are a set of packages that must be
transported between various locations using vehicles. Two types of vehicles
operate in this world: trucks, which travel on roads between nearby locations,
and airplanes, which fly between more distant locations (typically airports).

(define (domain logistics)

    (:requirements :strips :typing) 

    (:types
    )

    (:predicates
    )

    (:action load-truck
        :parameters (?pkg - package ?truck - truck ?loc - place)
        :precondition ()
        :effect ()
    )

    (:action load-airplane
        :parameters (?pkg - package ?airplane - airplane ?loc - place)
        :precondition ()
        :effect ()
    )

    (:action unload-truck
        :parameters (?pkg - package ?truck - truck ?loc - place)
        :precondition ()
        :effect ()
    )

    (:action unload-airplane
        :parameters (?pkg - package ?airplane - airplane ?loc - place)
        :precondition  ()
        :effect ()
    )

    (:action drive-truck
        :parameters (?truck - truck ?loc-from - place ?loc-to - place ?city - city)
        :precondition ()
        :effect ()
    )

    (:action fly-airplane
        :parameters (?airplane - airplane ?loc-from - airport ?loc-to - airport)
        :precondition ()
        :effect ()
    )
)
assistant
(define (domain logistics)

    (:requirements :strips :typing) 

    (:types truck
        airplane - vehicle
        package
        vehicle - physobj
        airport
        location - place
        city
        place 
        physobj - object
    )

    (:predicates 	
        (in-city ?loc - place ?city - city)
        (at ?obj - physobj ?loc - place)
        (in ?pkg - package ?veh - vehicle)
    )

    (:action load-truck
        :parameters    (?pkg - package ?truck - truck ?loc - place)
        :precondition  (and (at ?truck ?loc) (at ?pkg ?loc))
        :effect        (and (not (at ?pkg ?loc)) (in ?pkg ?truck))
    )

    (:action load-airplane
        :parameters   (?pkg - package ?airplane - airplane ?loc - place)
        :precondition (and (at ?pkg ?loc) (at ?airplane ?loc))
        :effect       (and (not (at ?pkg ?loc)) (in ?pkg ?airplane))
    )

    (:action unload-truck
        :parameters   (?pkg - package ?truck - truck ?loc - place)
        :precondition (and (at ?truck ?loc) (in ?pkg ?truck))
        :effect       (and (not (in ?pkg ?truck)) (at ?pkg ?loc))
    )

    (:action unload-airplane
        :parameters    (?pkg - package ?airplane - airplane ?loc - place)
        :precondition  (and (in ?pkg ?airplane) (at ?airplane ?loc))
        :effect        (and (not (in ?pkg ?airplane)) (at ?pkg ?loc))
    )

    (:action drive-truck
        :parameters (?truck - truck ?loc-from - place ?loc-to - place ?city - city)
        :precondition (and (at ?truck ?loc-from) (in-city ?loc-from ?city) (in-city ?loc-to ?city))
        :effect (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to))
    )

    (:action fly-airplane
        :parameters (?airplane - airplane ?loc-from - airport ?loc-to - airport)
        :precondition (at ?airplane ?loc-from)
        :effect (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to))
    )
)
user

(define (domain bookseller)

    (:requirements :strips :typing)

    (:types book location drone capacity - object)

    (:predicates 
    )

    (:action loadFirst
        :parameters (?d - drone ?b - book ?l - location)
        :precondition ()
        :effect ()
    )

    (:action loadBottom
        :parameters (?d - drone ?b1 ?b2 - book ?l - location)
        :precondition ()
        :effect ()
    )

    (:action unloadFinal
        :parameters (?d - drone ?b - book ?l - location)
        :precondition ()
        :effect ()
    )

    (:action unloadBottom
        :parameters (?d - drone ?b1 ?b2 - book ?l - location)
        :precondition ()
        :effect ()
    )

    (:action flyDrone
        :parameters (?d - drone ?l1 ?l2 - location)
        :precondition ()
        :effect ()
    )
)
system

Given a template of a Planning Domain Definition Language (PDDL) planning domain and a natural language description of that domain,
fill in the types and predicates as well as the missing preconditions and effects for each action in the domain using the provided natural language description.

The following restrictions apply to the output:
1) You are only to output PDDL, and nothing else. You are to output the domain as raw text, with no additional formatting.
2) You are to use the provided template as a base, and only fill in the missing preconditions and effects for each action.
3) The output domain should be typed STRIPS, which means that the preconditions should only contain positive literals, do not include any negated preconditions, or quantified preconditions or effects. 

user
The domain assumes a world where there are a set of blocks that can
be stacked on top of each other, an arm that can hold one block at
a time, and a table where blocks can be placed.

(define (domain blocks)

    (:requirements :strips :typing)

    (:types
    )

    (:predicates 
    )

    (:action pick-up
        :parameters (?x - block)
        :precondition ()
        :effect ()
    )

    (:action put-down
        :parameters (?x - block)
        :precondition ()
        :effect ()
    )

    (:action stack
        :parameters (?x - block ?y - block)
        :precondition ()
        :effect ()
    )

    (:action unstack
        :parameters (?x - block ?y - block)
        :precondition ()
        :effect ()
    )
)
assistant

(define (domain blocks)

    (:requirements :strips :typing)

    (:types block)

    (:predicates 
        (on ?x - block ?y - block)
        (ontable ?x - block)
        (clear ?x - block)
        (handempty)
        (holding ?x - block)
    )

    (:action pick-up
        :parameters (?x - block)
        :precondition (and (clear ?x) (ontable ?x) (handempty))
        :effect (and (not (ontable ?x)) (not (clear ?x)) (not (handempty)) (holding ?x))
    )

    (:action put-down
        :parameters (?x - block)
        :precondition (holding ?x)
        :effect (and (not (holding ?x)) (clear ?x) (handempty) (ontable ?x))
    )

    (:action stack
        :parameters (?x - block ?y - block)
        :precondition (and (holding ?x) (clear ?y))
        :effect (and (not (holding ?x)) (not (clear ?y)) (clear ?x) (handempty) (on ?x ?y))
    )

    (:action unstack
        :parameters (?x - block ?y - block)
        :precondition (and (on ?x ?y) (clear ?x) (handempty))
        :effect (and (holding ?x) (clear ?y) (not (clear ?x)) (not (handempty)) (not (on ?x ?y)))
    )
)
user
The domain assumes a world where there are a set of packages that must be
transported between various locations using vehicles. Two types of vehicles
operate in this world: trucks, which travel on roads between nearby locations,
and airplanes, which fly between more distant locations (typically airports).

(define (domain logistics)

    (:requirements :strips :typing) 

    (:types
    )

    (:predicates
    )

    (:action load-truck
        :parameters (?pkg - package ?truck - truck ?loc - place)
        :precondition ()
        :effect ()
    )

    (:action load-airplane
        :parameters (?pkg - package ?airplane - airplane ?loc - place)
        :precondition ()
        :effect ()
    )

    (:action unload-truck
        :parameters (?pkg - package ?truck - truck ?loc - place)
        :precondition ()
        :effect ()
    )

    (:action unload-airplane
        :parameters (?pkg - package ?airplane - airplane ?loc - place)
        :precondition  ()
        :effect ()
    )

    (:action drive-truck
        :parameters (?truck - truck ?loc-from - place ?loc-to - place ?city - city)
        :precondition ()
        :effect ()
    )

    (:action fly-airplane
        :parameters (?airplane - airplane ?loc-from - airport ?loc-to - airport)
        :precondition ()
        :effect ()
    )
)
assistant
(define (domain logistics)

    (:requirements :strips :typing) 

    (:types truck
        airplane - vehicle
        package
        vehicle - physobj
        airport
        location - place
        city
        place 
        physobj - object
    )

    (:predicates 	
        (in-city ?loc - place ?city - city)
        (at ?obj - physobj ?loc - place)
        (in ?pkg - package ?veh - vehicle)
    )

    (:action load-truck
        :parameters    (?pkg - package ?truck - truck ?loc - place)
        :precondition  (and (at ?truck ?loc) (at ?pkg ?loc))
        :effect        (and (not (at ?pkg ?loc)) (in ?pkg ?truck))
    )

    (:action load-airplane
        :parameters   (?pkg - package ?airplane - airplane ?loc - place)
        :precondition (and (at ?pkg ?loc) (at ?airplane ?loc))
        :effect       (and (not (at ?pkg ?loc)) (in ?pkg ?airplane))
    )

    (:action unload-truck
        :parameters   (?pkg - package ?truck - truck ?loc - place)
        :precondition (and (at ?truck ?loc) (in ?pkg ?truck))
        :effect       (and (not (in ?pkg ?truck)) (at ?pkg ?loc))
    )

    (:action unload-airplane
        :parameters    (?pkg - package ?airplane - airplane ?loc - place)
        :precondition  (and (in ?pkg ?airplane) (at ?airplane ?loc))
        :effect        (and (not (in ?pkg ?airplane)) (at ?pkg ?loc))
    )

    (:action drive-truck
        :parameters (?truck - truck ?loc-from - place ?loc-to - place ?city - city)
        :precondition (and (at ?truck ?loc-from) (in-city ?loc-from ?city) (in-city ?loc-to ?city))
        :effect (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to))
    )

    (:action fly-airplane
        :parameters (?airplane - airplane ?loc-from - airport ?loc-to - airport)
        :precondition (at ?airplane ?loc-from)
        :effect (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to))
    )
)
user
(define (domain flow_free)

    (:requirements :strips :typing)

    (:types
        color
        location
    )

    (:predicates
    )

    (:action start
        :parameters (?l - location ?c - color)
        :precondition () 
        :effect ()
    )

    (:action move
        :parameters (?l1  ?l2 - location ?c - color)
        :precondition ()
        :effect ()
    )

    (:action finish
        :parameters (?l1  ?l2 - location ?c - color)
        :precondition () 
        :effect ()
    )
)
system

Given a template of a Planning Domain Definition Language (PDDL) planning domain and a natural language description of that domain,
fill in the types and predicates as well as the missing preconditions and effects for each action in the domain using the provided natural language description.

The following restrictions apply to the output:
1) You are only to output PDDL, and nothing else. You are to output the domain as raw text, with no additional formatting.
2) You are to use the provided template as a base, and only fill in the missing preconditions and effects for each action.
3) The output domain should be typed STRIPS, which means that the preconditions should only contain positive literals, do not include any negated preconditions, or quantified preconditions or effects. 

user
The domain assumes a world where there are a set of blocks that can
be stacked on top of each other, an arm that can hold one block at
a time, and a table where blocks can be placed.

(define (domain blocks)

    (:requirements :strips :typing)

    (:types
    )

    (:predicates 
    )

    (:action pick-up
        :parameters (?x - block)
        :precondition ()
        :effect ()
    )

    (:action put-down
        :parameters (?x - block)
        :precondition ()
        :effect ()
    )

    (:action stack
        :parameters (?x - block ?y - block)
        :precondition ()
        :effect ()
    )

    (:action unstack
        :parameters (?x - block ?y - block)
        :precondition ()
        :effect ()
    )
)
assistant

(define (domain blocks)

    (:requirements :strips :typing)

    (:types block)

    (:predicates 
        (on ?x - block ?y - block)
        (ontable ?x - block)
        (clear ?x - block)
        (handempty)
        (holding ?x - block)
    )

    (:action pick-up
        :parameters (?x - block)
        :precondition (and (clear ?x) (ontable ?x) (handempty))
        :effect (and (not (ontable ?x)) (not (clear ?x)) (not (handempty)) (holding ?x))
    )

    (:action put-down
        :parameters (?x - block)
        :precondition (holding ?x)
        :effect (and (not (holding ?x)) (clear ?x) (handempty) (ontable ?x))
    )

    (:action stack
        :parameters (?x - block ?y - block)
        :precondition (and (holding ?x) (clear ?y))
        :effect (and (not (holding ?x)) (not (clear ?y)) (clear ?x) (handempty) (on ?x ?y))
    )

    (:action unstack
        :parameters (?x - block ?y - block)
        :precondition (and (on ?x ?y) (clear ?x) (handempty))
        :effect (and (holding ?x) (clear ?y) (not (clear ?x)) (not (handempty)) (not (on ?x ?y)))
    )
)
user
The domain assumes a world where there are a set of packages that must be
transported between various locations using vehicles. Two types of vehicles
operate in this world: trucks, which travel on roads between nearby locations,
and airplanes, which fly between more distant locations (typically airports).

(define (domain logistics)

    (:requirements :strips :typing) 

    (:types
    )

    (:predicates
    )

    (:action load-truck
        :parameters (?pkg - package ?truck - truck ?loc - place)
        :precondition ()
        :effect ()
    )

    (:action load-airplane
        :parameters (?pkg - package ?airplane - airplane ?loc - place)
        :precondition ()
        :effect ()
    )

    (:action unload-truck
        :parameters (?pkg - package ?truck - truck ?loc - place)
        :precondition ()
        :effect ()
    )

    (:action unload-airplane
        :parameters (?pkg - package ?airplane - airplane ?loc - place)
        :precondition  ()
        :effect ()
    )

    (:action drive-truck
        :parameters (?truck - truck ?loc-from - place ?loc-to - place ?city - city)
        :precondition ()
        :effect ()
    )

    (:action fly-airplane
        :parameters (?airplane - airplane ?loc-from - airport ?loc-to - airport)
        :precondition ()
        :effect ()
    )
)
assistant
(define (domain logistics)

    (:requirements :strips :typing) 

    (:types truck
        airplane - vehicle
        package
        vehicle - physobj
        airport
        location - place
        city
        place 
        physobj - object
    )

    (:predicates 	
        (in-city ?loc - place ?city - city)
        (at ?obj - physobj ?loc - place)
        (in ?pkg - package ?veh - vehicle)
    )

    (:action load-truck
        :parameters    (?pkg - package ?truck - truck ?loc - place)
        :precondition  (and (at ?truck ?loc) (at ?pkg ?loc))
        :effect        (and (not (at ?pkg ?loc)) (in ?pkg ?truck))
    )

    (:action load-airplane
        :parameters   (?pkg - package ?airplane - airplane ?loc - place)
        :precondition (and (at ?pkg ?loc) (at ?airplane ?loc))
        :effect       (and (not (at ?pkg ?loc)) (in ?pkg ?airplane))
    )

    (:action unload-truck
        :parameters   (?pkg - package ?truck - truck ?loc - place)
        :precondition (and (at ?truck ?loc) (in ?pkg ?truck))
        :effect       (and (not (in ?pkg ?truck)) (at ?pkg ?loc))
    )

    (:action unload-airplane
        :parameters    (?pkg - package ?airplane - airplane ?loc - place)
        :precondition  (and (in ?pkg ?airplane) (at ?airplane ?loc))
        :effect        (and (not (in ?pkg ?airplane)) (at ?pkg ?loc))
    )

    (:action drive-truck
        :parameters (?truck - truck ?loc-from - place ?loc-to - place ?city - city)
        :precondition (and (at ?truck ?loc-from) (in-city ?loc-from ?city) (in-city ?loc-to ?city))
        :effect (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to))
    )

    (:action fly-airplane
        :parameters (?airplane - airplane ?loc-from - airport ?loc-to - airport)
        :precondition (at ?airplane ?loc-from)
        :effect (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to))
    )
)
user
(define (domain pathfinder)

    (:requirements :strips :typing)

    (:types location direction - object)

    (:predicates
    )

    (:action motion-clear
        :parameters (?l1 ?l2 - location ?d - direction)
        :precondition ()
        :effect ()
    )

    (:action motion-start
        :parameters (?d - direction)
        :precondition ()
        :effect ()
    )

    (:action motion-plate
        :parameters (?l1 ?l2 - location ?d - direction)
        :precondition ()
        :effect ()
    )

    (:action motion-wall
        :parameters (?l1 ?l2 - location ?d - direction)
        :precondition ()
        :effect ()
    )
)
