
"""
This file contains utilities for exporting experiment results and logs.
"""

import os

from pddl import parse_domain
from pddl.parser.domain import DomainParser

from nl3pddl.logger import logger
from nl3pddl.params import feedback_pipeline_str
from nl3pddl.experiment_state import State


# CSV header for the results file
RESULTS_HEADER = [
    "trial",
    "domain_path",
    "provider",
    "model",
    "give_pred_descriptions",
    "desc_class",
    "feedback_pipeline",
    "landmark_runs",
    "val_runs",
    "hde_runs",
    "hde_timeout",
    "action_timeout",
    "action_timeout_cause",
    "evals_passed",
    "total_evals",
    #"domain_raw"
]

def gen_csv_results(s : State) -> tuple:
    """
    Generates a tuple of results for the experiment, to be written to the
    results file, Requires that the experiment has completed successfully.
    needs to match the RESULTS_HEADER.
    """
    return (
        #s["run_id"],
        s["PARAMS"].trial,
        s["PARAMS"].domain_path,
        s["PARAMS"].provider,
        s["PARAMS"].model,
        s["PARAMS"].give_pred_descriptions,
        s["PARAMS"].desc_class,
        feedback_pipeline_str(s["PARAMS"]),
        s["landmark_runs"],
        s["val_runs"],
        s["hde_iterations"],
        s["hde_timeout"],
        s["action_timeout"],
        s["action_timeout_cause"],
        s["evals_passed"],
        s["total_evals"],
    )

def write_message_log(s : State, err_msg : str, results_dir : str) -> None:
    """
    Writes the message log to a file in the results directory.
    """
    domain_path = s['PARAMS'].domain_path.split("/")[-1]
    log_path = os.path.join(results_dir, f"""{s['PARAMS'].provider}_{s['PARAMS'].model}_{domain_path}_{s['PARAMS'].desc_class}_{s['PARAMS'].trial}_{feedback_pipeline_str(s['PARAMS'])}_messages.log""")
    with open(log_path, 'w', encoding="utf-8") as f:
        f.write("NON VAR INFO =========================================\n\n")
        f.write(f"TRIAL: {s['PARAMS'].trial}\n")
        f.write("\nExperiment Params ====================================\n\n")
        f.write(f"PROVIDER: {s['PARAMS'].provider}\n")
        f.write(f"MODEL: {s['PARAMS'].model}\n")
        f.write(f"DOMAIN PATH: {s['PARAMS'].domain_path}\n")
        f.write(f"DESC CLASS: {s['PARAMS'].desc_class}\n")
        f.write(f"FEEDBACK PIPELINE: {feedback_pipeline_str(s['PARAMS'])}\n")
        f.write(f"GIVE PRED DESCRIPTIONS: {s['PARAMS'].give_pred_descriptions}\n")

        if err_msg != "":
            f.write("\nERROR MESSAGE ======================================\n\n")
            f.write(err_msg + "\n")
            return
        
        f.write("\nEXPERIMENT RESULTS ===================================\n\n")
        f.write(f"DOMAIN CHECK RUNS: {s['domain_check_runs']}\n")
        f.write(f"LANDMARK RUNS: {s['landmark_runs']}\n")
        f.write(f"VAL RUNS: {s['val_runs']}\n")
        f.write(f"HDE ITERATIONS: {s['hde_iterations']}\n")
        f.write(f"HDE TIMEOUT: {s['hde_timeout']}\n")
        f.write(f"ACTION TIMEOUT: {s['action_timeout']}\n")
        f.write(f"ACTION TIMEOUT CAUSE: {s['action_timeout_cause']}\n")
        f.write(f"EVALS PASSED: {s['evals_passed']}\n")
        f.write(f"TOTAL EVALS: {s['total_evals']}\n")
        f.write("LANGGRAPH PATH:\n\t" + '->\n\t'.join(s['langgraph_path']) + "\n")
        f.write("Message Tree:\n" + s["messages"].to_str())
        
        f.write("\nFINAL DOMAIN =====================================\n\n")
        try:
            domain_str = DomainParser()(s["messages"].json_last()["pddl_domain"] if s["messages"].json_last() else "")
            f.write(str(domain_str))
        except Exception as e:
            f.write("No Domain was Generated by the Model, either because the pipeline never passed the domain construction stage, or because the model output was invalid.\n")

        f.write("\n GROUND DOMAIN =====================================\n\n")
        try:
            domain_str = parse_domain(s["PARAMS"].domain_path + "/ground.pddl")
            f.write(str(domain_str))
        except Exception as e:
            f.write("No Ground Domain was Found, this should never happen.\n")

        f.write("\nMessages ===========================================\n\n\n")
        for msg in s["messages"].message_history():
            if hasattr(msg, 'type'):
                f.write(msg.type.upper() + "\n\n")
                f.write(msg.content + "\n\n\n")
            elif hasattr(msg, 'content'):
                f.write("Unknown Role" + "\n\n")
                f.write(msg.content + "\n\n\n")
            else:
                logger.warning(f"Message with no content or type: {msg}")
                f.write(str(msg) + "\n\n\n")